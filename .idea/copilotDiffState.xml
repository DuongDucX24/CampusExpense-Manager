<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.telephony&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Design.Light.NoActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity android:name=&quot;.LifeCycleSecondActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestLifeCycleActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestEventActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestComponentActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.MenuActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.RegisterActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.AddBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.EditBudgetActivity&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.telephony&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Design.Light.NoActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity android:name=&quot;.LifeCycleSecondActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestLifeCycleActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestEventActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestComponentActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.MenuActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.RegisterActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.AddBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.EditBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.AddExpenseActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.EditExpenseActivity&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/AddExpenseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/AddExpenseActivity.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.app.DatePickerDialog;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.CompoundButton;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;&#10;import java.util.Calendar;&#10;&#10;public class AddExpenseActivity extends AppCompatActivity {&#10;&#10;    private EditText edtExpenseDescription, edtExpenseAmount, edtExpenseDate, edtRecurringStartDate, edtRecurringEndDate;&#10;    private Spinner spinnerExpenseCategory;&#10;    private CheckBox chkRecurring;&#10;    private LinearLayout layoutRecurringDates;&#10;    private Button btnSaveExpense, btnBackExpense;&#10;&#10;    private ExpenseRepository expenseRepository;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_add_expense);&#10;&#10;        expenseRepository = new ExpenseRepository(this);&#10;&#10;        edtExpenseDescription = findViewById(R.id.edtExpenseDescription);&#10;        edtExpenseAmount = findViewById(R.id.edtExpenseAmount);&#10;        edtExpenseDate = findViewById(R.id.edtExpenseDate);&#10;        spinnerExpenseCategory = findViewById(R.id.spinnerExpenseCategory);&#10;        chkRecurring = findViewById(R.id.chkRecurring);&#10;        layoutRecurringDates = findViewById(R.id.layoutRecurringDates);&#10;        edtRecurringStartDate = findViewById(R.id.edtRecurringStartDate);&#10;        edtRecurringEndDate = findViewById(R.id.edtRecurringEndDate);&#10;        btnSaveExpense = findViewById(R.id.btnSaveExpense);&#10;        btnBackExpense = findViewById(R.id.btnBackExpense);&#10;&#10;        // Category Spinner&#10;        ArrayAdapter&lt;CharSequence&gt; adapter = ArrayAdapter.createFromResource(this,&#10;                R.array.expense_categories, android.R.layout.simple_spinner_item);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerExpenseCategory.setAdapter(adapter);&#10;&#10;        // Date Pickers&#10;        edtExpenseDate.setOnClickListener(v -&gt; showDatePickerDialog(edtExpenseDate));&#10;        edtRecurringStartDate.setOnClickListener(v -&gt; showDatePickerDialog(edtRecurringStartDate));&#10;        edtRecurringEndDate.setOnClickListener(v -&gt; showDatePickerDialog(edtRecurringEndDate));&#10;&#10;        // Recurring Expense Checkbox&#10;        chkRecurring.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            if (isChecked) {&#10;                layoutRecurringDates.setVisibility(View.VISIBLE);&#10;            } else {&#10;                layoutRecurringDates.setVisibility(View.GONE);&#10;            }&#10;        });&#10;&#10;        btnSaveExpense.setOnClickListener(v -&gt; saveExpense());&#10;        btnBackExpense.setOnClickListener(v -&gt; finish());&#10;    }&#10;&#10;    private void showDatePickerDialog(final EditText editText) {&#10;        final Calendar c = Calendar.getInstance();&#10;        int year = c.get(Calendar.YEAR);&#10;        int month = c.get(Calendar.MONTH);&#10;        int day = c.get(Calendar.DAY_OF_MONTH);&#10;&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(this,&#10;                (view, year1, monthOfYear, dayOfMonth) -&gt; {&#10;                    String selectedDate = dayOfMonth + &quot;/&quot; + (monthOfYear + 1) + &quot;/&quot; + year1;&#10;                    editText.setText(selectedDate);&#10;                }, year, month, day);&#10;        datePickerDialog.show();&#10;    }&#10;&#10;    private void saveExpense() {&#10;        String description = edtExpenseDescription.getText().toString().trim();&#10;        String amountStr = edtExpenseAmount.getText().toString().trim();&#10;        String date = edtExpenseDate.getText().toString().trim();&#10;        String category = spinnerExpenseCategory.getSelectedItem().toString();&#10;        boolean isRecurring = chkRecurring.isChecked();&#10;        String recurringStartDate = edtRecurringStartDate.getText().toString().trim();&#10;        String recurringEndDate = edtRecurringEndDate.getText().toString().trim();&#10;&#10;        if (TextUtils.isEmpty(description) || TextUtils.isEmpty(amountStr) || TextUtils.isEmpty(date)) {&#10;            Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double amount = Double.parseDouble(amountStr);&#10;&#10;        Expense expense = new Expense();&#10;        expense.setDescription(description);&#10;        expense.setAmount(amount);&#10;        expense.setDate(date);&#10;        expense.setCategory(category);&#10;        expense.setRecurring(isRecurring);&#10;        if (isRecurring) {&#10;            expense.setRecurringStartDate(recurringStartDate);&#10;            expense.setRecurringEndDate(recurringEndDate);&#10;        }&#10;&#10;        long id = expenseRepository.addExpense(expense);&#10;        if (id &gt; 0) {&#10;            Toast.makeText(this, &quot;Expense saved successfully&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;        } else {&#10;            Toast.makeText(this, &quot;Failed to save expense&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/EditExpenseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/EditExpenseActivity.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.app.DatePickerDialog;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;&#10;import java.util.Arrays;&#10;import java.util.Calendar;&#10;&#10;public class EditExpenseActivity extends AppCompatActivity {&#10;&#10;    private EditText edtExpenseDescription, edtExpenseAmount, edtExpenseDate, edtRecurringStartDate, edtRecurringEndDate;&#10;    private Spinner spinnerExpenseCategory;&#10;    private CheckBox chkRecurring;&#10;    private LinearLayout layoutRecurringDates;&#10;    private Button btnSaveExpense, btnDeleteExpense, btnBackExpense;&#10;&#10;    private ExpenseRepository expenseRepository;&#10;    private Expense expense;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_expense);&#10;&#10;        expenseRepository = new ExpenseRepository(this);&#10;&#10;        edtExpenseDescription = findViewById(R.id.edtExpenseDescription);&#10;        edtExpenseAmount = findViewById(R.id.edtExpenseAmount);&#10;        edtExpenseDate = findViewById(R.id.edtExpenseDate);&#10;        spinnerExpenseCategory = findViewById(R.id.spinnerExpenseCategory);&#10;        chkRecurring = findViewById(R.id.chkRecurring);&#10;        layoutRecurringDates = findViewById(R.id.layoutRecurringDates);&#10;        edtRecurringStartDate = findViewById(R.id.edtRecurringStartDate);&#10;        edtRecurringEndDate = findViewById(R.id.edtRecurringEndDate);&#10;        btnSaveExpense = findViewById(R.id.btnSaveExpense);&#10;        btnDeleteExpense = findViewById(R.id.btnDeleteExpense);&#10;        btnBackExpense = findViewById(R.id.btnBackExpense);&#10;&#10;        // Category Spinner&#10;        ArrayAdapter&lt;CharSequence&gt; adapter = ArrayAdapter.createFromResource(this,&#10;                R.array.expense_categories, android.R.layout.simple_spinner_item);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerExpenseCategory.setAdapter(adapter);&#10;&#10;        // Date Pickers&#10;        edtExpenseDate.setOnClickListener(v -&gt; showDatePickerDialog(edtExpenseDate));&#10;        edtRecurringStartDate.setOnClickListener(v -&gt; showDatePickerDialog(edtRecurringStartDate));&#10;        edtRecurringEndDate.setOnClickListener(v -&gt; showDatePickerDialog(edtRecurringEndDate));&#10;&#10;        // Recurring Expense Checkbox&#10;        chkRecurring.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            if (isChecked) {&#10;                layoutRecurringDates.setVisibility(View.VISIBLE);&#10;            } else {&#10;                layoutRecurringDates.setVisibility(View.GONE);&#10;            }&#10;        });&#10;&#10;        // Get expense from intent&#10;        expense = (Expense) getIntent().getSerializableExtra(&quot;expense&quot;);&#10;        if (expense != null) {&#10;            populateFields();&#10;        }&#10;&#10;        btnSaveExpense.setOnClickListener(v -&gt; saveExpense());&#10;        btnDeleteExpense.setOnClickListener(v -&gt; deleteExpense());&#10;        btnBackExpense.setOnClickListener(v -&gt; finish());&#10;    }&#10;&#10;    private void populateFields() {&#10;        edtExpenseDescription.setText(expense.getDescription());&#10;        edtExpenseAmount.setText(String.valueOf(expense.getAmount()));&#10;        edtExpenseDate.setText(expense.getDate());&#10;        String[] categories = getResources().getStringArray(R.array.expense_categories);&#10;        spinnerExpenseCategory.setSelection(Arrays.asList(categories).indexOf(expense.getCategory()));&#10;        chkRecurring.setChecked(expense.isRecurring());&#10;        if (expense.isRecurring()) {&#10;            layoutRecurringDates.setVisibility(View.VISIBLE);&#10;            edtRecurringStartDate.setText(expense.getRecurringStartDate());&#10;            edtRecurringEndDate.setText(expense.getRecurringEndDate());&#10;        }&#10;    }&#10;&#10;    private void showDatePickerDialog(final EditText editText) {&#10;        final Calendar c = Calendar.getInstance();&#10;        int year = c.get(Calendar.YEAR);&#10;        int month = c.get(Calendar.MONTH);&#10;        int day = c.get(Calendar.DAY_OF_MONTH);&#10;&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(this,&#10;                (view, year1, monthOfYear, dayOfMonth) -&gt; {&#10;                    String selectedDate = dayOfMonth + &quot;/&quot; + (monthOfYear + 1) + &quot;/&quot; + year1;&#10;                    editText.setText(selectedDate);&#10;                }, year, month, day);&#10;        datePickerDialog.show();&#10;    }&#10;&#10;    private void saveExpense() {&#10;        String description = edtExpenseDescription.getText().toString().trim();&#10;        String amountStr = edtExpenseAmount.getText().toString().trim();&#10;        String date = edtExpenseDate.getText().toString().trim();&#10;        String category = spinnerExpenseCategory.getSelectedItem().toString();&#10;        boolean isRecurring = chkRecurring.isChecked();&#10;        String recurringStartDate = edtRecurringStartDate.getText().toString().trim();&#10;        String recurringEndDate = edtRecurringEndDate.getText().toString().trim();&#10;&#10;        if (TextUtils.isEmpty(description) || TextUtils.isEmpty(amountStr) || TextUtils.isEmpty(date)) {&#10;            Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double amount = Double.parseDouble(amountStr);&#10;&#10;        expense.setDescription(description);&#10;        expense.setAmount(amount);&#10;        expense.setDate(date);&#10;        expense.setCategory(category);&#10;        expense.setRecurring(isRecurring);&#10;        if (isRecurring) {&#10;            expense.setRecurringStartDate(recurringStartDate);&#10;            expense.setRecurringEndDate(recurringEndDate);&#10;        }&#10;&#10;        int rows = expenseRepository.updateExpense(expense);&#10;        if (rows &gt; 0) {&#10;            Toast.makeText(this, &quot;Expense updated successfully&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;        } else {&#10;            Toast.makeText(this, &quot;Failed to update expense&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void deleteExpense() {&#10;        expenseRepository.deleteExpense(expense.getId());&#10;        Toast.makeText(this, &quot;Expense deleted successfully&quot;, Toast.LENGTH_SHORT).show();&#10;        finish();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/ExpensesFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/ExpensesFragment.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.adapter.ExpenseAdapter;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * A simple {@link Fragment} subclass.&#10; * Use the {@link ExpensesFragment#newInstance} factory method to&#10; * create an instance of this fragment.&#10; */&#10;public class ExpensesFragment extends Fragment {&#10;&#10;    // TODO: Rename parameter arguments, choose names that match&#10;    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER&#10;    private static final String ARG_PARAM1 = &quot;param1&quot;;&#10;    private static final String ARG_PARAM2 = &quot;param2&quot;;&#10;&#10;    private RecyclerView recyclerViewExpenses;&#10;    private FloatingActionButton fabAddExpense;&#10;    private ExpenseRepository expenseRepository;&#10;    private ExpenseAdapter expenseAdapter;&#10;    private List&lt;Expense&gt; expenseList = new ArrayList&lt;&gt;();&#10;&#10;    public ExpensesFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Use this factory method to create a new instance of&#10;     * this fragment using the provided parameters.&#10;     *&#10;     * @param param1 Parameter 1.&#10;     * @param param2 Parameter 2.&#10;     * @return A new instance of fragment ExpensesFragment.&#10;     */&#10;    // TODO: Rename and change types and number of parameters&#10;    public static ExpensesFragment newInstance(String param1, String param2) {&#10;        ExpensesFragment fragment = new ExpensesFragment();&#10;        Bundle args = new Bundle();&#10;        args.putString(ARG_PARAM1, param1);&#10;        args.putString(ARG_PARAM2, param2);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            // TODO: Rename and change types of parameters&#10;            String mParam1 = getArguments().getString(ARG_PARAM1);&#10;            String mParam2 = getArguments().getString(ARG_PARAM2);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_expenses, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        recyclerViewExpenses = view.findViewById(R.id.recyclerViewExpenses);&#10;        fabAddExpense = view.findViewById(R.id.fabAddExpense);&#10;&#10;        expenseRepository = new ExpenseRepository(getContext());&#10;&#10;        recyclerViewExpenses.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        expenseAdapter = new ExpenseAdapter(expenseList);&#10;        recyclerViewExpenses.setAdapter(expenseAdapter);&#10;&#10;        fabAddExpense.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(getActivity(), AddExpenseActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        loadExpenses();&#10;    }&#10;&#10;    private void loadExpenses() {&#10;        expenseList.clear();&#10;        expenseList.addAll(expenseRepository.getAllExpenses());&#10;        expenseAdapter.notifyDataSetChanged();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.adapter.ExpenseAdapter;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * A simple {@link Fragment} subclass.&#10; * Use the {@link ExpensesFragment#newInstance} factory method to&#10; * create an instance of this fragment.&#10; */&#10;public class ExpensesFragment extends Fragment {&#10;&#10;    // TODO: Rename parameter arguments, choose names that match&#10;    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER&#10;    private static final String ARG_PARAM1 = &quot;param1&quot;;&#10;    private static final String ARG_PARAM2 = &quot;param2&quot;;&#10;&#10;    private RecyclerView recyclerViewExpenses;&#10;    private FloatingActionButton fabAddExpense;&#10;    private ExpenseRepository expenseRepository;&#10;    private ExpenseAdapter expenseAdapter;&#10;    private List&lt;Expense&gt; expenseList = new ArrayList&lt;&gt;();&#10;&#10;    public ExpensesFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Use this factory method to create a new instance of&#10;     * this fragment using the provided parameters.&#10;     *&#10;     * @param param1 Parameter 1.&#10;     * @param param2 Parameter 2.&#10;     * @return A new instance of fragment ExpensesFragment.&#10;     */&#10;    // TODO: Rename and change types and number of parameters&#10;    public static ExpensesFragment newInstance(String param1, String param2) {&#10;        ExpensesFragment fragment = new ExpensesFragment();&#10;        Bundle args = new Bundle();&#10;        args.putString(ARG_PARAM1, param1);&#10;        args.putString(ARG_PARAM2, param2);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            // TODO: Rename and change types of parameters&#10;            String mParam1 = getArguments().getString(ARG_PARAM1);&#10;            String mParam2 = getArguments().getString(ARG_PARAM2);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_expenses, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        recyclerViewExpenses = view.findViewById(R.id.recyclerViewExpenses);&#10;        fabAddExpense = view.findViewById(R.id.fabAddExpense);&#10;&#10;        expenseRepository = new ExpenseRepository(getContext());&#10;&#10;        recyclerViewExpenses.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        expenseAdapter = new ExpenseAdapter(expenseList);&#10;        recyclerViewExpenses.setAdapter(expenseAdapter);&#10;&#10;        expenseAdapter.setOnItemClickListener(expense -&gt; {&#10;            Intent intent = new Intent(getActivity(), EditExpenseActivity.class);&#10;            intent.putExtra(&quot;expense&quot;, expense);&#10;            startActivity(intent);&#10;        });&#10;&#10;        fabAddExpense.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(getActivity(), AddExpenseActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        loadExpenses();&#10;    }&#10;&#10;    private void loadExpenses() {&#10;        expenseList.clear();&#10;        expenseList.addAll(expenseRepository.getAllExpenses());&#10;        expenseAdapter.notifyDataSetChanged();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/BudgetAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/BudgetAdapter.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.adapter;&#10;&#10;import android.content.Context;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.database.BudgetModel;&#10;&#10;import java.util.List;&#10;&#10;public class BudgetAdapter extends RecyclerView.Adapter&lt;BudgetAdapter.BudgetViewHolder&gt; {&#10;&#10;    private List&lt;BudgetModel&gt; budgetList;&#10;    private OnItemClickListener listener;&#10;&#10;    public interface OnItemClickListener {&#10;        void onItemClick(BudgetModel budget);&#10;    }&#10;&#10;    public void setOnItemClickListener(OnItemClickListener listener) {&#10;        this.listener = listener;&#10;    }&#10;&#10;    public BudgetAdapter(List&lt;BudgetModel&gt; budgetList) {&#10;        this.budgetList = budgetList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public BudgetViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View itemView = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.budget_item, parent, false);&#10;        return new BudgetViewHolder(itemView);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull BudgetViewHolder holder, int position) {&#10;        BudgetModel currentBudget = budgetList.get(position);&#10;        holder.tvBudgetName.setText(currentBudget.getName());&#10;        holder.tvBudgetAmount.setText(String.format(&quot;Amount: $%.2f&quot;, currentBudget.getAmount()));&#10;        holder.tvBudgetPeriod.setText(currentBudget.getPeriod());&#10;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onItemClick(currentBudget);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return budgetList.size();&#10;    }&#10;&#10;    static class BudgetViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvBudgetName;&#10;        private TextView tvBudgetAmount;&#10;        private TextView tvBudgetPeriod;&#10;&#10;        public BudgetViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvBudgetName = itemView.findViewById(R.id.tvBudgetName);&#10;            tvBudgetAmount = itemView.findViewById(R.id.tvBudgetAmount);&#10;            tvBudgetPeriod = itemView.findViewById(R.id.tvBudgetPeriod);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/ExpenseAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/ExpenseAdapter.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;&#10;import java.util.List;&#10;&#10;public class ExpenseAdapter extends RecyclerView.Adapter&lt;ExpenseAdapter.ExpenseViewHolder&gt; {&#10;&#10;    private List&lt;Expense&gt; expenseList;&#10;    private OnItemClickListener listener;&#10;&#10;    public interface OnItemClickListener {&#10;        void onItemClick(Expense expense);&#10;    }&#10;&#10;    public void setOnItemClickListener(OnItemClickListener listener) {&#10;        this.listener = listener;&#10;    }&#10;&#10;    public ExpenseAdapter(List&lt;Expense&gt; expenseList) {&#10;        this.expenseList = expenseList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ExpenseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View itemView = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.expense_item, parent, false);&#10;        return new ExpenseViewHolder(itemView);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ExpenseViewHolder holder, int position) {&#10;        Expense currentExpense = expenseList.get(position);&#10;        holder.tvExpenseDescription.setText(currentExpense.getDescription());&#10;        holder.tvExpenseCategory.setText(currentExpense.getCategory());&#10;        holder.tvExpenseAmount.setText(String.format(&quot;Amount: $%.2f&quot;, currentExpense.getAmount()));&#10;        holder.tvExpenseDate.setText(currentExpense.getDate());&#10;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onItemClick(currentExpense);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return expenseList.size();&#10;    }&#10;&#10;    static class ExpenseViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvExpenseDescription;&#10;        private TextView tvExpenseCategory;&#10;        private TextView tvExpenseAmount;&#10;        private TextView tvExpenseDate;&#10;&#10;        public ExpenseViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvExpenseDescription = itemView.findViewById(R.id.tvExpenseDescription);&#10;            tvExpenseCategory = itemView.findViewById(R.id.tvExpenseCategory);&#10;            tvExpenseAmount = itemView.findViewById(R.id.tvExpenseAmount);&#10;            tvExpenseDate = itemView.findViewById(R.id.tvExpenseDate);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetModel.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;public class BudgetModel {&#10;    private int id;&#10;    private String budgetName;&#10;    private int budgetMoney;&#10;    private String budgetDescription;&#10;    private String createdAt;&#10;    private String updatedAt;&#10;&#10;    public BudgetModel(int id, String budgetName, int budgetMoney, String budgetDescription, String createdAt, String updatedAt){&#10;        this.id = id;&#10;        this.budgetName = budgetName;&#10;        this.budgetMoney = budgetMoney;&#10;        this.budgetDescription = budgetDescription;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getBudgetName() {&#10;        return budgetName;&#10;    }&#10;&#10;    public void setBudgetName(String budgetName) {&#10;        this.budgetName = budgetName;&#10;    }&#10;&#10;    public int getBudgetMoney() {&#10;        return budgetMoney;&#10;    }&#10;&#10;    public void setBudgetMoney(int budgetMoney) {&#10;        this.budgetMoney = budgetMoney;&#10;    }&#10;&#10;    public String getBudgetDescription() {&#10;        return budgetDescription;&#10;    }&#10;&#10;    public void setBudgetDescription(String budgetDescription) {&#10;        this.budgetDescription = budgetDescription;&#10;    }&#10;&#10;    public String getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(String createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public String getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(String updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#13;&#10;&#13;&#10;import java.io.Serializable;&#13;&#10;&#13;&#10;public class BudgetModel implements Serializable {&#13;&#10;    private int id;&#13;&#10;    private String name;&#13;&#10;    private double amount;&#13;&#10;    private String period;&#13;&#10;&#13;&#10;    public BudgetModel() {&#13;&#10;    }&#13;&#10;&#13;&#10;    public BudgetModel(int id, String name, double amount, String period) {&#13;&#10;        this.id = id;&#13;&#10;        this.name = name;&#13;&#10;        this.amount = amount;&#13;&#10;        this.period = period;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getId() {&#13;&#10;        return id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setId(int id) {&#13;&#10;        this.id = id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getName() {&#13;&#10;        return name;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setName(String name) {&#13;&#10;        this.name = name;&#13;&#10;    }&#13;&#10;&#13;&#10;    public double getAmount() {&#13;&#10;        return amount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setAmount(double amount) {&#13;&#10;        this.amount = amount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getPeriod() {&#13;&#10;        return period;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setPeriod(String period) {&#13;&#10;        this.period = period;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetRepository.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;&#10;import androidx.annotation.Nullable;&#10;&#10;import java.time.ZonedDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;&#10;public class BudgetRepository extends DbHelper{&#10;    public BudgetRepository(@Nullable Context context) {&#10;        super(context);&#10;    }&#10;&#10;    public long addNewBudget(String name, int money, String description){&#10;        @SuppressLint({&quot;NewApi&quot;, &quot;LocalSuppress&quot;}) DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);&#10;        @SuppressLint({&quot;NewApi&quot;, &quot;LocalSuppress&quot;}) ZonedDateTime zone = ZonedDateTime.now();&#10;        @SuppressLint({&quot;NewApi&quot;, &quot;LocalSuppress&quot;}) String currentDate = dtf.format(zone);&#10;        // lay ra ngay thang hien tai&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_BUDGET_NAME, name);&#10;        values.put(DbHelper.COL_BUDGET_MONEY, money);&#10;        values.put(DbHelper.COL_BUDGET_DESCRIPTION, description);&#10;        values.put(DbHelper.COL_CREATED_AT, currentDate);&#10;        SQLiteDatabase db = this.getWritableDatabase(); // ghi du lieu&#10;        long insert = db.insert(DbHelper.DB_TABLE_BUDGET, null, values);&#10;        db.close();&#10;        return insert;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public ArrayList&lt;BudgetModel&gt; getListBudget(){&#10;        ArrayList&lt;BudgetModel&gt; budgetArrayList = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = this.getReadableDatabase(); // doc du lieu&#10;        Cursor cursor = db.rawQuery(&quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_BUDGET, null);&#10;        if (cursor != null &amp;&amp; cursor.getCount() &gt; 0){&#10;            if (cursor.moveToFirst()){&#10;                do {&#10;                    // do du lieu vao model&#10;                    budgetArrayList.add(&#10;                        new BudgetModel(&#10;                            cursor.getInt(cursor.getColumnIndex(DbHelper.COL_BUDGET_ID)),&#10;                            cursor.getString(cursor.getColumnIndex(DbHelper.COL_BUDGET_NAME)),&#10;                            cursor.getInt(cursor.getColumnIndex(DbHelper.COL_BUDGET_MONEY)),&#10;                            cursor.getString(cursor.getColumnIndex(DbHelper.COL_BUDGET_DESCRIPTION)),&#10;                            cursor.getString(cursor.getColumnIndex(DbHelper.COL_CREATED_AT)),&#10;                            cursor.getString(cursor.getColumnIndex(DbHelper.COL_UPDATED_AT))&#10;                        )&#10;                    );&#10;                } while (cursor.moveToNext());&#10;            }&#10;            cursor.close();&#10;        }&#10;        db.close();&#10;        return  budgetArrayList;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#13;&#10;&#13;&#10;import android.annotation.SuppressLint;&#13;&#10;import android.content.ContentValues;&#13;&#10;import android.content.Context;&#13;&#10;import android.database.Cursor;&#13;&#10;import android.database.sqlite.SQLiteDatabase;&#13;&#10;&#13;&#10;import androidx.annotation.Nullable;&#13;&#10;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class BudgetRepository extends DbHelper {&#13;&#10;    public BudgetRepository(@Nullable Context context) {&#13;&#10;        super(context);&#13;&#10;    }&#13;&#10;&#13;&#10;    public long addBudget(BudgetModel budget) {&#13;&#10;        SQLiteDatabase db = this.getWritableDatabase();&#13;&#10;        ContentValues values = new ContentValues();&#13;&#10;        values.put(DbHelper.COL_BUDGET_NAME, budget.getName());&#13;&#10;        values.put(DbHelper.COL_BUDGET_AMOUNT, budget.getAmount());&#13;&#10;        values.put(DbHelper.COL_BUDGET_PERIOD, budget.getPeriod());&#13;&#10;        long id = db.insert(DbHelper.DB_TABLE_BUDGET, null, values);&#13;&#10;        db.close();&#13;&#10;        return id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int updateBudget(BudgetModel budget) {&#13;&#10;        SQLiteDatabase db = this.getWritableDatabase();&#13;&#10;        ContentValues values = new ContentValues();&#13;&#10;        values.put(DbHelper.COL_BUDGET_NAME, budget.getName());&#13;&#10;        values.put(DbHelper.COL_BUDGET_AMOUNT, budget.getAmount());&#13;&#10;        values.put(DbHelper.COL_BUDGET_PERIOD, budget.getPeriod());&#13;&#10;        return db.update(DbHelper.DB_TABLE_BUDGET, values, DbHelper.COL_BUDGET_ID + &quot; = ?&quot;,&#13;&#10;                new String[]{String.valueOf(budget.getId())});&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deleteBudget(long id) {&#13;&#10;        SQLiteDatabase db = this.getWritableDatabase();&#13;&#10;        db.delete(DbHelper.DB_TABLE_BUDGET, DbHelper.COL_BUDGET_ID + &quot; = ?&quot;,&#13;&#10;                new String[]{String.valueOf(id)});&#13;&#10;        db.close();&#13;&#10;    }&#13;&#10;&#13;&#10;    @SuppressLint(&quot;Range&quot;)&#13;&#10;    public List&lt;BudgetModel&gt; getAllBudgets() {&#13;&#10;        List&lt;BudgetModel&gt; budgets = new ArrayList&lt;&gt;();&#13;&#10;        String selectQuery = &quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_BUDGET;&#13;&#10;        SQLiteDatabase db = this.getWritableDatabase();&#13;&#10;        Cursor cursor = db.rawQuery(selectQuery, null);&#13;&#10;        if (cursor.moveToFirst()) {&#13;&#10;            do {&#13;&#10;                BudgetModel budget = new BudgetModel();&#13;&#10;                budget.setId(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_BUDGET_ID)));&#13;&#10;                budget.setName(cursor.getString(cursor.getColumnIndex(DbHelper.COL_BUDGET_NAME)));&#13;&#10;                budget.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_BUDGET_AMOUNT)));&#13;&#10;                budget.setPeriod(cursor.getString(cursor.getColumnIndex(DbHelper.COL_BUDGET_PERIOD)));&#13;&#10;                budgets.add(budget);&#13;&#10;            } while (cursor.moveToNext());&#13;&#10;        }&#13;&#10;        cursor.close();&#13;&#10;        db.close();&#13;&#10;        return budgets;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/DbHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/DbHelper.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.content.Context;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.database.sqlite.SQLiteOpenHelper;&#10;&#10;import androidx.annotation.Nullable;&#10;&#10;public class DbHelper extends SQLiteOpenHelper {&#10;    public static final String DB_NAME = &quot;CampusExpense&quot;;&#10;    public static final int DB_VERSION = 2;&#10;&#10;    // Table User&#10;    public static final String DB_TABLE_USER = &quot;user&quot;;&#10;    public static final String COL_USER_ID = &quot;id&quot;;&#10;    public static final String COL_USER_USERNAME = &quot;username&quot;;&#10;    public static final String COL_USER_PASSWORD = &quot;password&quot;;&#10;    public static final String COL_USER_EMAIL = &quot;email&quot;;&#10;    public static final String COL_USER_PHONE = &quot;phone&quot;;&#10;    public static final String COL_USER_ROLE = &quot;role&quot;;&#10;    public static final String COL_CREATED_AT = &quot;created_at&quot;;&#10;&#10;    // Table Budget&#10;    public static final String DB_TABLE_BUDGET = &quot;budget&quot;;&#10;    public static final String COL_BUDGET_ID = &quot;id&quot;;&#10;    public static final String COL_BUDGET_NAME = &quot;name&quot;;&#10;    public static final String COL_BUDGET_AMOUNT = &quot;amount&quot;;&#10;    public static final String COL_BUDGET_PERIOD = &quot;period&quot;;&#10;&#10;    // Table Expenses&#10;    public static final String DB_TABLE_EXPENSES = &quot;expenses&quot;;&#10;    public static final String COL_EXPENSE_ID = &quot;id&quot;;&#10;    public static final String COL_EXPENSE_DESCRIPTION = &quot;description&quot;;&#10;    public static final String COL_EXPENSE_AMOUNT = &quot;amount&quot;;&#10;    public static final String COL_EXPENSE_DATE = &quot;date&quot;;&#10;    public static final String COL_EXPENSE_CATEGORY = &quot;category&quot;;&#10;    public static final String COL_EXPENSE_RECURRING = &quot;recurring&quot;;&#10;    public static final String COL_EXPENSE_RECURRING_START_DATE = &quot;recurring_start_date&quot;;&#10;    public static final String COL_EXPENSE_RECURRING_END_DATE = &quot;recurring_end_date&quot;;&#10;&#10;&#10;    public DbHelper(@Nullable Context context) {&#10;        super(context, DB_NAME, null, DB_VERSION);&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(SQLiteDatabase db) {&#10;        // sql create table user&#10;        String sql_user = &quot;CREATE TABLE &quot; + DB_TABLE_USER + &quot;(&quot; +&#10;                COL_USER_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_USER_USERNAME + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_PASSWORD + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_EMAIL + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_PHONE + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_ROLE + &quot; INTEGER, &quot; +&#10;                COL_CREATED_AT + &quot; TEXT NOT NULL&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_user);&#10;&#10;        // sql create table budget&#10;        String sql_budget = &quot;CREATE TABLE &quot; + DB_TABLE_BUDGET + &quot;(&quot; +&#10;                COL_BUDGET_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_BUDGET_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                COL_BUDGET_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                COL_BUDGET_PERIOD + &quot; TEXT NOT NULL&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_budget);&#10;&#10;        // sql create table expenses&#10;        String sql_expenses = &quot;CREATE TABLE &quot; + DB_TABLE_EXPENSES + &quot;(&quot; +&#10;                COL_EXPENSE_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_EXPENSE_DESCRIPTION + &quot; TEXT NOT NULL, &quot; +&#10;                COL_EXPENSE_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                COL_EXPENSE_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                COL_EXPENSE_CATEGORY + &quot; TEXT NOT NULL, &quot; +&#10;                COL_EXPENSE_RECURRING + &quot; INTEGER DEFAULT 0, &quot; +&#10;                COL_EXPENSE_RECURRING_START_DATE + &quot; TEXT, &quot; +&#10;                COL_EXPENSE_RECURRING_END_DATE + &quot; TEXT&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_expenses);&#10;    }&#10;&#10;    @Override&#10;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {&#10;        if (oldVersion &lt; 2) {&#10;            db.execSQL(&quot;ALTER TABLE &quot; + DB_TABLE_USER + &quot; ADD COLUMN &quot; + COL_USER_PHONE + &quot; TEXT NOT NULL DEFAULT ''&quot;);&#10;            db.execSQL(&quot;ALTER TABLE &quot; + DB_TABLE_USER + &quot; ADD COLUMN &quot; + COL_USER_ROLE + &quot; INTEGER DEFAULT 0&quot;);&#10;            db.execSQL(&quot;ALTER TABLE &quot; + DB_TABLE_USER + &quot; ADD COLUMN &quot; + COL_CREATED_AT + &quot; TEXT NOT NULL DEFAULT ''&quot;);&#10;            String sql_budget = &quot;CREATE TABLE &quot; + DB_TABLE_BUDGET + &quot;(&quot; +&#10;                    COL_BUDGET_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COL_BUDGET_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_BUDGET_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                    COL_BUDGET_PERIOD + &quot; TEXT NOT NULL&quot; +&#10;                    &quot;)&quot;;&#10;            db.execSQL(sql_budget);&#10;            String sql_expenses = &quot;CREATE TABLE &quot; + DB_TABLE_EXPENSES + &quot;(&quot; +&#10;                    COL_EXPENSE_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COL_EXPENSE_DESCRIPTION + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_EXPENSE_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                    COL_EXPENSE_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_EXPENSE_CATEGORY + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_EXPENSE_RECURRING + &quot; INTEGER DEFAULT 0, &quot; +&#10;                    COL_EXPENSE_RECURRING_START_DATE + &quot; TEXT, &quot; +&#10;                    COL_EXPENSE_RECURRING_END_DATE + &quot; TEXT&quot; +&#10;                    &quot;)&quot;;&#10;            db.execSQL(sql_expenses);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/Expense.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/Expense.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;public class Expense {&#10;    private int id;&#10;    private String description;&#10;    private double amount;&#10;    private String date;&#10;    private String category;&#10;    private boolean recurring;&#10;    private String recurringStartDate;&#10;    private String recurringEndDate;&#10;&#10;    public Expense() {&#10;    }&#10;&#10;    public Expense(int id, String description, double amount, String date, String category, boolean recurring, String recurringStartDate, String recurringEndDate) {&#10;        this.id = id;&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.date = date;&#10;        this.category = category;&#10;        this.recurring = recurring;&#10;        this.recurringStartDate = recurringStartDate;&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public double getAmount() {&#10;        return amount;&#10;    }&#10;&#10;    public void setAmount(double amount) {&#10;        this.amount = amount;&#10;    }&#10;&#10;    public String getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(String date) {&#10;        this.date = date;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public boolean isRecurring() {&#10;        return recurring;&#10;    }&#10;&#10;    public void setRecurring(boolean recurring) {&#10;        this.recurring = recurring;&#10;    }&#10;&#10;    public String getRecurringStartDate() {&#10;        return recurringStartDate;&#10;    }&#10;&#10;    public void setRecurringStartDate(String recurringStartDate) {&#10;        this.recurringStartDate = recurringStartDate;&#10;    }&#10;&#10;    public String getRecurringEndDate() {&#10;        return recurringEndDate;&#10;    }&#10;&#10;    public void setRecurringEndDate(String recurringEndDate) {&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import java.io.Serializable;&#10;&#10;public class Expense implements Serializable {&#10;    private int id;&#10;    private String description;&#10;    private double amount;&#10;    private String date;&#10;    private String category;&#10;    private boolean recurring;&#10;    private String recurringStartDate;&#10;    private String recurringEndDate;&#10;&#10;    public Expense() {&#10;    }&#10;&#10;    public Expense(int id, String description, double amount, String date, String category, boolean recurring, String recurringStartDate, String recurringEndDate) {&#10;        this.id = id;&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.date = date;&#10;        this.category = category;&#10;        this.recurring = recurring;&#10;        this.recurringStartDate = recurringStartDate;&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public double getAmount() {&#10;        return amount;&#10;    }&#10;&#10;    public void setAmount(double amount) {&#10;        this.amount = amount;&#10;    }&#10;&#10;    public String getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(String date) {&#10;        this.date = date;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public boolean isRecurring() {&#10;        return recurring;&#10;    }&#10;&#10;    public void setRecurring(boolean recurring) {&#10;        this.recurring = recurring;&#10;    }&#10;&#10;    public String getRecurringStartDate() {&#10;        return recurringStartDate;&#10;    }&#10;&#10;    public void setRecurringStartDate(String recurringStartDate) {&#10;        this.recurringStartDate = recurringStartDate;&#10;    }&#10;&#10;    public String getRecurringEndDate() {&#10;        return recurringEndDate;&#10;    }&#10;&#10;    public void setRecurringEndDate(String recurringEndDate) {&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/ExpenseRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/ExpenseRepository.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ExpenseRepository {&#10;    private DbHelper dbHelper;&#10;&#10;    public ExpenseRepository(Context context) {&#10;        dbHelper = new DbHelper(context);&#10;    }&#10;&#10;    public long addExpense(Expense expense) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_EXPENSE_DESCRIPTION, expense.getDescription());&#10;        values.put(DbHelper.COL_EXPENSE_AMOUNT, expense.getAmount());&#10;        values.put(DbHelper.COL_EXPENSE_DATE, expense.getDate());&#10;        values.put(DbHelper.COL_EXPENSE_CATEGORY, expense.getCategory());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING, expense.isRecurring() ? 1 : 0);&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_START_DATE, expense.getRecurringStartDate());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_END_DATE, expense.getRecurringEndDate());&#10;        long id = db.insert(DbHelper.DB_TABLE_EXPENSES, null, values);&#10;        db.close();&#10;        return id;&#10;    }&#10;&#10;    public int updateExpense(Expense expense) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_EXPENSE_DESCRIPTION, expense.getDescription());&#10;        values.put(DbHelper.COL_EXPENSE_AMOUNT, expense.getAmount());&#10;        values.put(DbHelper.COL_EXPENSE_DATE, expense.getDate());&#10;        values.put(DbHelper.COL_EXPENSE_CATEGORY, expense.getCategory());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING, expense.isRecurring() ? 1 : 0);&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_START_DATE, expense.getRecurringStartDate());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_END_DATE, expense.getRecurringEndDate());&#10;        return db.update(DbHelper.DB_TABLE_EXPENSES, values, DbHelper.COL_EXPENSE_ID + &quot; = ?&quot;,&#10;                new String[]{String.valueOf(expense.getId())});&#10;    }&#10;&#10;    public void deleteExpense(long id) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        db.delete(DbHelper.DB_TABLE_EXPENSES, DbHelper.COL_EXPENSE_ID + &quot; = ?&quot;,&#10;                new String[]{String.valueOf(id)});&#10;        db.close();&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getAllExpenses() {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        String selectQuery = &quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_EXPENSES;&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        Cursor cursor = db.rawQuery(selectQuery, null);&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setId(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_ID)));&#10;                expense.setDescription(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DESCRIPTION)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expense.setDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DATE)));&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setRecurring(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING)) == 1);&#10;                expense.setRecurringStartDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_START_DATE)));&#10;                expense.setRecurringEndDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_END_DATE)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_add_expense.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_add_expense.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:autofillHints=&quot;&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;10dp&quot;&#10;    tools:ignore=&quot;VisualLintButtonSize&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Add Expense&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:ignore=&quot;HardcodedText&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseName&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense name&quot;&#10;        android:inputType=&quot;text&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Select date&quot;&#10;        android:focusable=&quot;false&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:inputType=&quot;date&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spinnerExpenseCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Description&quot;&#10;        android:inputType=&quot;textMultiLine&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Save&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBackExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Back&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:autofillHints=&quot;&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;10dp&quot;&#10;    tools:ignore=&quot;VisualLintButtonSize&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Add Expense&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:ignore=&quot;HardcodedText&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense description&quot;&#10;        android:inputType=&quot;text&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Select date&quot;&#10;        android:focusable=&quot;false&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:inputType=&quot;date&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spinnerExpenseCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;CheckBox&#10;        android:id=&quot;@+id/chkRecurring&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:text=&quot;Recurring Expense&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutRecurringDates&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringStartDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select start date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringEndDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select end date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Save&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBackExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Back&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_edit_expense.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_edit_expense.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:autofillHints=&quot;&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;10dp&quot;&#10;    tools:ignore=&quot;VisualLintButtonSize&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Edit Expense&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:ignore=&quot;HardcodedText&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense description&quot;&#10;        android:inputType=&quot;text&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Select date&quot;&#10;        android:focusable=&quot;false&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:inputType=&quot;date&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spinnerExpenseCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;CheckBox&#10;        android:id=&quot;@+id/chkRecurring&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:text=&quot;Recurring Expense&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutRecurringDates&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringStartDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select start date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringEndDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select end date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Save&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnDeleteExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FF0000&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:text=&quot;Delete&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBackExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Back&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/budget_item.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/budget_item.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvBudgetName&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvBudgetAmount&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvBudgetPeriod&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;12sp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/expense_item.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/expense_item.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseDescription&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseCategory&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseAmount&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseDate&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;12sp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_expenses.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_expenses.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ExpensesFragment&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;!-- TODO: Update blank fragment layout --&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Expenses Page&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    tools:context=&quot;.ExpensesFragment&quot;&gt;&#13;&#10;&#13;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;        android:id=&quot;@+id/recyclerViewExpenses&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:padding=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;        android:id=&quot;@+id/fabAddExpense&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_alignParentEnd=&quot;true&quot;&#13;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#13;&#10;        android:layout_margin=&quot;16dp&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_input_add&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;SE07101CampusExpenses&lt;/string&gt;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#10;    &lt;string name=&quot;open_drawer&quot;&gt;Open&lt;/string&gt;&#10;    &lt;string name=&quot;close_drawer&quot;&gt;Close&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#13;&#10;    &lt;string name=&quot;app_name&quot;&gt;SE07101CampusExpenses&lt;/string&gt;&#13;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#13;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;open_drawer&quot;&gt;Open&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;close_drawer&quot;&gt;Close&lt;/string&gt;&#13;&#10;    &lt;string-array name=&quot;expense_categories&quot;&gt;&#13;&#10;        &lt;item&gt;Food&lt;/item&gt;&#13;&#10;        &lt;item&gt;Transportation&lt;/item&gt;&#13;&#10;        &lt;item&gt;Housing&lt;/item&gt;&#13;&#10;        &lt;item&gt;Utilities&lt;/item&gt;&#13;&#10;        &lt;item&gt;Entertainment&lt;/item&gt;&#13;&#10;        &lt;item&gt;Health&lt;/item&gt;&#13;&#10;        &lt;item&gt;Education&lt;/item&gt;&#13;&#10;        &lt;item&gt;Other&lt;/item&gt;&#13;&#10;    &lt;/string-array&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>