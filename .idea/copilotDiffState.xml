<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;android {&#10;    namespace 'com.example.se07101campusexpenses'&#10;    compileSdk 34&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.example.se07101campusexpenses&quot;&#10;        minSdk 24&#10;        targetSdk 34&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_11&#10;        targetCompatibility JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation libs.appcompat&#10;    implementation libs.material&#10;    implementation libs.activity&#10;    implementation libs.constraintlayout&#10;    implementation libs.room.common.jvm&#10;    implementation 'androidx.gridlayout:gridlayout:1.0.0'&#10;    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'&#10;    testImplementation libs.junit&#10;    androidTestImplementation libs.ext.junit&#10;    androidTestImplementation libs.espresso.core&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;}&#10;&#10;android {&#10;    namespace 'com.example.se07101campusexpenses'&#10;    compileSdk 34&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.example.se07101campusexpenses&quot;&#10;        minSdk 24&#10;        targetSdk 34&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            minifyEnabled false&#10;            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_11&#10;        targetCompatibility JavaVersion.VERSION_11&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation libs.appcompat&#10;    implementation libs.material&#10;    implementation libs.activity&#10;    implementation libs.constraintlayout&#10;    implementation libs.room.common.jvm&#10;    implementation 'androidx.gridlayout:gridlayout:1.0.0'&#10;    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'&#10;    testImplementation 'junit:junit:4.13.2'&#10;    androidTestImplementation 'androidx.test.ext:junit:1.1.5'&#10;    androidTestImplementation libs.espresso.core&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.telephony&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Design.Light.NoActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity android:name=&quot;.LifeCycleSecondActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestLifeCycleActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestEventActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestComponentActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.MenuActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.RegisterActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.RecurringExpenseActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.AddRecurringExpenseActivity&quot;/&gt;&#10;        &lt;service android:name=&quot;.service.RecurringExpenseService&quot; /&gt;&#10;        &lt;service android:name=&quot;.service.NotificationService&quot; /&gt;&#10;        &lt;activity android:name=&quot;.budget.AddBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.EditBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.AddExpenseActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.EditExpenseActivity&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-feature&#10;        android:name=&quot;android.hardware.telephony&quot;&#10;        android:required=&quot;false&quot; /&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.CALL_PHONE&quot;/&gt;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Design.Light.NoActionBar&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity android:name=&quot;.LifeCycleSecondActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestLifeCycleActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestEventActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.TestComponentActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.MenuActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.RegisterActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.RecurringExpenseActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.AddRecurringExpenseActivity&quot;/&gt;&#10;        &lt;service android:name=&quot;.service.RecurringExpenseService&quot; /&gt;&#10;        &lt;service android:name=&quot;.service.NotificationService&quot; /&gt;&#10;        &lt;activity android:name=&quot;.ExpenseReportActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.AddBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.budget.EditBudgetActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.AddExpenseActivity&quot;/&gt;&#10;        &lt;activity android:name=&quot;.EditExpenseActivity&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/AddRecurringExpenseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/AddRecurringExpenseActivity.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.example.se07101campusexpenses.database.RecurringExpenseDao;&#10;import com.example.se07101campusexpenses.database.AppDatabase;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;&#10;public class AddRecurringExpenseActivity extends AppCompatActivity {&#10;&#10;    private EditText etDescription, etAmount, etCategory, etStartDate, etEndDate;&#10;    private Spinner spFrequency;&#10;    private Button btnSave;&#10;    private RecurringExpenseDao recurringExpenseDao;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_add_recurring_expense);&#10;&#10;        etDescription = findViewById(R.id.etDescription);&#10;        etAmount = findViewById(R.id.etAmount);&#10;        etCategory = findViewById(R.id.etCategory);&#10;        spFrequency = findViewById(R.id.spFrequency);&#10;        etStartDate = findViewById(R.id.etStartDate);&#10;        etEndDate = findViewById(R.id.etEndDate);&#10;        btnSave = findViewById(R.id.btnSave);&#10;&#10;        // recurringExpenseDao = AppDatabase.getInstance(this).recurringExpenseDao();&#10;&#10;        btnSave.setOnClickListener(v -&gt; saveRecurringExpense());&#10;    }&#10;&#10;    private void saveRecurringExpense() {&#10;        String description = etDescription.getText().toString();&#10;        String amountStr = etAmount.getText().toString();&#10;        String category = etCategory.getText().toString();&#10;        String frequency = spFrequency.getSelectedItem().toString();&#10;        String startDate = etStartDate.getText().toString();&#10;        String endDate = etEndDate.getText().toString();&#10;&#10;        if (description.isEmpty() || amountStr.isEmpty() || category.isEmpty() || startDate.isEmpty() || endDate.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double amount = Double.parseDouble(amountStr);&#10;        int userId = getCurrentUserId();&#10;&#10;        RecurringExpense recurringExpense = new RecurringExpense();&#10;        recurringExpense.description = description;&#10;        recurringExpense.amount = amount;&#10;        recurringExpense.category = category;&#10;        recurringExpense.frequency = frequency;&#10;        recurringExpense.startDate = startDate;&#10;        recurringExpense.endDate = endDate;&#10;        recurringExpense.userId = userId;&#10;&#10;        // new Thread(() -&gt; {&#10;        //     recurringExpenseDao.insert(recurringExpense);&#10;        //     runOnUiThread(() -&gt; {&#10;        //         Toast.makeText(this, &quot;Recurring expense saved&quot;, Toast.LENGTH_SHORT).show();&#10;        //         finish();&#10;        //     });&#10;        // }).start();&#10;    }&#10;&#10;    private int getCurrentUserId() {&#10;        // Implement logic to get the current user's ID&#10;        return 1; // Placeholder&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import com.example.se07101campusexpenses.database.AppDatabase;&#10;import com.example.se07101campusexpenses.database.RecurringExpenseDao;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;&#10;public class AddRecurringExpenseActivity extends AppCompatActivity {&#10;&#10;    private EditText etDescription, etAmount, etCategory, etStartDate, etEndDate;&#10;    private Spinner spFrequency;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_add_recurring_expense);&#10;&#10;        etDescription = findViewById(R.id.etDescription);&#10;        etAmount = findViewById(R.id.etAmount);&#10;        etCategory = findViewById(R.id.etCategory);&#10;        spFrequency = findViewById(R.id.spFrequency);&#10;        etStartDate = findViewById(R.id.etStartDate);&#10;        etEndDate = findViewById(R.id.etEndDate);&#10;        Button btnSave = findViewById(R.id.btnSave);&#10;&#10;        RecurringExpenseDao recurringExpenseDao = AppDatabase.getInstance(this).recurringExpenseDao();&#10;&#10;        btnSave.setOnClickListener(v -&gt; saveRecurringExpense(recurringExpenseDao));&#10;    }&#10;&#10;    private void saveRecurringExpense(RecurringExpenseDao recurringExpenseDao) {&#10;        String description = etDescription.getText().toString();&#10;        String amountStr = etAmount.getText().toString();&#10;        String category = etCategory.getText().toString();&#10;        String frequency = spFrequency.getSelectedItem().toString();&#10;        String startDate = etStartDate.getText().toString();&#10;        String endDate = etEndDate.getText().toString();&#10;&#10;        if (description.isEmpty() || amountStr.isEmpty() || category.isEmpty() || startDate.isEmpty() || endDate.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double amount = Double.parseDouble(amountStr);&#10;        int userId = getCurrentUserId();&#10;&#10;        RecurringExpense recurringExpense = new RecurringExpense();&#10;        recurringExpense.description = description;&#10;        recurringExpense.amount = amount;&#10;        recurringExpense.category = category;&#10;        recurringExpense.frequency = frequency;&#10;        recurringExpense.startDate = startDate;&#10;        recurringExpense.endDate = endDate;&#10;        recurringExpense.userId = userId;&#10;&#10;        AppDatabase.databaseWriteExecutor.execute(() -&gt; {&#10;            recurringExpenseDao.insert(recurringExpense);&#10;            runOnUiThread(() -&gt; {&#10;                Toast.makeText(this, &quot;Recurring expense saved&quot;, Toast.LENGTH_SHORT).show();&#10;                finish();&#10;            });&#10;        });&#10;    }&#10;&#10;    private int getCurrentUserId() {&#10;        // Implement logic to get the current user's ID&#10;        return 1; // Placeholder&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/EditExpenseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/EditExpenseActivity.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.app.DatePickerDialog;&#10;import android.os.Bundle;&#10;import android.text.TextUtils;&#10;import android.view.View;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.Button;&#10;import android.widget.CheckBox;&#10;import android.widget.EditText;&#10;import android.widget.LinearLayout;&#10;import android.widget.Spinner;&#10;import android.widget.Toast;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;&#10;import java.util.Arrays;&#10;import java.util.Calendar;&#10;&#10;public class EditExpenseActivity extends AppCompatActivity {&#10;&#10;    private EditText edtExpenseDescription, edtExpenseAmount, edtExpenseDate, edtRecurringStartDate, edtRecurringEndDate;&#10;    private Spinner spinnerExpenseCategory;&#10;    private CheckBox chkRecurring;&#10;    private LinearLayout layoutRecurringDates;&#10;    private Button btnSaveExpense, btnDeleteExpense, btnBackExpense;&#10;&#10;    private ExpenseRepository expenseRepository;&#10;    private Expense expense;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_edit_expense);&#10;&#10;        expenseRepository = new ExpenseRepository(this);&#10;&#10;        edtExpenseDescription = findViewById(R.id.edtExpenseDescription);&#10;        edtExpenseAmount = findViewById(R.id.edtExpenseAmount);&#10;        edtExpenseDate = findViewById(R.id.edtExpenseDate);&#10;        spinnerExpenseCategory = findViewById(R.id.spinnerExpenseCategory);&#10;        chkRecurring = findViewById(R.id.chkRecurring);&#10;        layoutRecurringDates = findViewById(R.id.layoutRecurringDates);&#10;        edtRecurringStartDate = findViewById(R.id.edtRecurringStartDate);&#10;        edtRecurringEndDate = findViewById(R.id.edtRecurringEndDate);&#10;        btnSaveExpense = findViewById(R.id.btnSaveExpense);&#10;        btnDeleteExpense = findViewById(R.id.btnDeleteExpense);&#10;        btnBackExpense = findViewById(R.id.btnBackExpense);&#10;&#10;        // Category Spinner&#10;        ArrayAdapter&lt;CharSequence&gt; adapter = ArrayAdapter.createFromResource(this,&#10;                R.array.expense_categories, android.R.layout.simple_spinner_item);&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spinnerExpenseCategory.setAdapter(adapter);&#10;&#10;        // Date Pickers&#10;        edtExpenseDate.setOnClickListener(v -&gt; showDatePickerDialog(edtExpenseDate));&#10;        edtRecurringStartDate.setOnClickListener(v -&gt; showDatePickerDialog(edtRecurringStartDate));&#10;        edtRecurringEndDate.setOnClickListener(v -&gt; showDatePickerDialog(edtRecurringEndDate));&#10;&#10;        // Recurring Expense Checkbox&#10;        chkRecurring.setOnCheckedChangeListener((buttonView, isChecked) -&gt; {&#10;            if (isChecked) {&#10;                layoutRecurringDates.setVisibility(View.VISIBLE);&#10;            } else {&#10;                layoutRecurringDates.setVisibility(View.GONE);&#10;            }&#10;        });&#10;&#10;        // Get expense from intent&#10;        expense = (Expense) getIntent().getSerializableExtra(&quot;expense&quot;);&#10;        if (expense != null) {&#10;            populateFields();&#10;        }&#10;&#10;        btnSaveExpense.setOnClickListener(v -&gt; saveExpense());&#10;        btnDeleteExpense.setOnClickListener(v -&gt; deleteExpense());&#10;        btnBackExpense.setOnClickListener(v -&gt; finish());&#10;    }&#10;&#10;    private void populateFields() {&#10;        edtExpenseDescription.setText(expense.getDescription());&#10;        edtExpenseAmount.setText(String.valueOf(expense.getAmount()));&#10;        edtExpenseDate.setText(expense.getDate());&#10;        String[] categories = getResources().getStringArray(R.array.expense_categories);&#10;        spinnerExpenseCategory.setSelection(Arrays.asList(categories).indexOf(expense.getCategory()));&#10;        chkRecurring.setChecked(expense.isRecurring());&#10;        if (expense.isRecurring()) {&#10;            layoutRecurringDates.setVisibility(View.VISIBLE);&#10;            edtRecurringStartDate.setText(expense.getRecurringStartDate());&#10;            edtRecurringEndDate.setText(expense.getRecurringEndDate());&#10;        }&#10;    }&#10;&#10;    private void showDatePickerDialog(final EditText editText) {&#10;        final Calendar c = Calendar.getInstance();&#10;        int year = c.get(Calendar.YEAR);&#10;        int month = c.get(Calendar.MONTH);&#10;        int day = c.get(Calendar.DAY_OF_MONTH);&#10;&#10;        DatePickerDialog datePickerDialog = new DatePickerDialog(this,&#10;                (view, year1, monthOfYear, dayOfMonth) -&gt; {&#10;                    String selectedDate = dayOfMonth + &quot;/&quot; + (monthOfYear + 1) + &quot;/&quot; + year1;&#10;                    editText.setText(selectedDate);&#10;                }, year, month, day);&#10;        datePickerDialog.show();&#10;    }&#10;&#10;    private void saveExpense() {&#10;        String description = edtExpenseDescription.getText().toString().trim();&#10;        String amountStr = edtExpenseAmount.getText().toString().trim();&#10;        String date = edtExpenseDate.getText().toString().trim();&#10;        String category = spinnerExpenseCategory.getSelectedItem().toString();&#10;        boolean isRecurring = chkRecurring.isChecked();&#10;        String recurringStartDate = edtRecurringStartDate.getText().toString().trim();&#10;        String recurringEndDate = edtRecurringEndDate.getText().toString().trim();&#10;&#10;        if (TextUtils.isEmpty(description) || TextUtils.isEmpty(amountStr) || TextUtils.isEmpty(date)) {&#10;            Toast.makeText(this, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        double amount = Double.parseDouble(amountStr);&#10;&#10;        expense.setDescription(description);&#10;        expense.setAmount(amount);&#10;        expense.setDate(date);&#10;        expense.setCategory(category);&#10;        expense.setRecurring(isRecurring);&#10;        if (isRecurring) {&#10;            expense.setRecurringStartDate(recurringStartDate);&#10;            expense.setRecurringEndDate(recurringEndDate);&#10;        }&#10;&#10;        int rows = expenseRepository.updateExpense(expense);&#10;        if (rows &gt; 0) {&#10;            Toast.makeText(this, &quot;Expense updated successfully&quot;, Toast.LENGTH_SHORT).show();&#10;            finish();&#10;        } else {&#10;            Toast.makeText(this, &quot;Failed to update expense&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    private void deleteExpense() {&#10;        expenseRepository.deleteExpense(expense.getId());&#10;        Toast.makeText(this, &quot;Expense deleted successfully&quot;, Toast.LENGTH_SHORT).show();&#10;        finish();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/ExpenseReportActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/ExpenseReportActivity.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.adapter.ExpenseReportAdapter;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.github.mikephil.charting.charts.PieChart;&#10;import com.github.mikephil.charting.data.PieData;&#10;import com.github.mikephil.charting.data.PieDataSet;&#10;import com.github.mikephil.charting.data.PieEntry;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ExpenseReportActivity extends AppCompatActivity {&#10;&#10;    private EditText etStartDate, etEndDate;&#10;    private Button btnGenerateReport;&#10;    private RecyclerView rvReport;&#10;    private TextView tvReportTotal;&#10;    private PieChart reportPieChart;&#10;    private ExpenseRepository expenseRepository;&#10;    private ExpenseReportAdapter adapter;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_expense_report);&#10;&#10;        etStartDate = findViewById(R.id.etStartDate);&#10;        etEndDate = findViewById(R.id.etEndDate);&#10;        btnGenerateReport = findViewById(R.id.btnGenerateReport);&#10;        rvReport = findViewById(R.id.rvReport);&#10;        tvReportTotal = findViewById(R.id.tvReportTotal);&#10;        reportPieChart = findViewById(R.id.reportPieChart);&#10;&#10;        expenseRepository = new ExpenseRepository(this);&#10;        rvReport.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        btnGenerateReport.setOnClickListener(v -&gt; generateReport());&#10;    }&#10;&#10;    private void generateReport() {&#10;        String startDate = etStartDate.getText().toString();&#10;        String endDate = etEndDate.getText().toString();&#10;&#10;        List&lt;Expense&gt; expenses = expenseRepository.getExpensesBetweenDates(startDate, endDate);&#10;        adapter = new ExpenseReportAdapter(expenses);&#10;        rvReport.setAdapter(adapter);&#10;&#10;        double total = 0;&#10;        for (Expense expense : expenses) {&#10;            total += expense.getAmount();&#10;        }&#10;        tvReportTotal.setText(String.format(&quot;Total Expenses: $%.2f&quot;, total));&#10;&#10;        setupPieChart(startDate, endDate);&#10;    }&#10;&#10;    private void setupPieChart(String startDate, String endDate) {&#10;        List&lt;PieEntry&gt; entries = new ArrayList&lt;&gt;();&#10;        List&lt;Expense&gt; expenses = expenseRepository.getExpensesByCategoryBetweenDates(startDate, endDate);&#10;&#10;        for (Expense expense : expenses) {&#10;            entries.add(new PieEntry((float) expense.getAmount(), expense.getCategory()));&#10;        }&#10;&#10;        PieDataSet dataSet = new PieDataSet(entries, &quot;Expenses by Category&quot;);&#10;        PieData pieData = new PieData(dataSet);&#10;        reportPieChart.setData(pieData);&#10;        reportPieChart.invalidate(); // refresh&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.TextView;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.adapter.ExpenseReportAdapter;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.github.mikephil.charting.charts.PieChart;&#10;import com.github.mikephil.charting.data.PieData;&#10;import com.github.mikephil.charting.data.PieDataSet;&#10;import com.github.mikephil.charting.data.PieEntry;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class ExpenseReportActivity extends AppCompatActivity {&#10;&#10;    private EditText etStartDate, etEndDate;&#10;    private RecyclerView rvReport;&#10;    private TextView tvReportTotal;&#10;    private PieChart reportPieChart;&#10;    private ExpenseRepository expenseRepository;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_expense_report);&#10;&#10;        etStartDate = findViewById(R.id.etStartDate);&#10;        etEndDate = findViewById(R.id.etEndDate);&#10;        Button btnGenerateReport = findViewById(R.id.btnGenerateReport);&#10;        rvReport = findViewById(R.id.rvReport);&#10;        tvReportTotal = findViewById(R.id.tvReportTotal);&#10;        reportPieChart = findViewById(R.id.reportPieChart);&#10;&#10;        expenseRepository = new ExpenseRepository(this);&#10;        rvReport.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        btnGenerateReport.setOnClickListener(v -&gt; generateReport());&#10;    }&#10;&#10;    private void generateReport() {&#10;        String startDate = etStartDate.getText().toString();&#10;        String endDate = etEndDate.getText().toString();&#10;&#10;        List&lt;Expense&gt; expenses = expenseRepository.getExpensesBetweenDates(startDate, endDate);&#10;        ExpenseReportAdapter adapter = new ExpenseReportAdapter(expenses);&#10;        rvReport.setAdapter(adapter);&#10;&#10;        double total = 0;&#10;        for (Expense expense : expenses) {&#10;            total += expense.getAmount();&#10;        }&#10;        tvReportTotal.setText(String.format(Locale.US, &quot;Total Expenses: $%.2f&quot;, total));&#10;&#10;        setupPieChart(startDate, endDate);&#10;    }&#10;&#10;    private void setupPieChart(String startDate, String endDate) {&#10;        List&lt;PieEntry&gt; entries = new ArrayList&lt;&gt;();&#10;        List&lt;Expense&gt; expenses = expenseRepository.getExpensesByCategoryBetweenDates(startDate, endDate);&#10;&#10;        for (Expense expense : expenses) {&#10;            entries.add(new PieEntry((float) expense.getAmount(), expense.getCategory()));&#10;        }&#10;&#10;        PieDataSet dataSet = new PieDataSet(entries, &quot;Expenses by Category&quot;);&#10;        PieData pieData = new PieData(dataSet);&#10;        reportPieChart.setData(pieData);&#10;        reportPieChart.invalidate(); // refresh&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/ExpensesFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/ExpensesFragment.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.adapter.ExpenseAdapter;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * A simple {@link Fragment} subclass.&#10; * Use the {@link ExpensesFragment#newInstance} factory method to&#10; * create an instance of this fragment.&#10; */&#10;public class ExpensesFragment extends Fragment {&#10;&#10;    // TODO: Rename parameter arguments, choose names that match&#10;    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER&#10;    private static final String ARG_PARAM1 = &quot;param1&quot;;&#10;    private static final String ARG_PARAM2 = &quot;param2&quot;;&#10;&#10;    private RecyclerView recyclerViewExpenses;&#10;    private FloatingActionButton fabAddExpense;&#10;    private ExpenseRepository expenseRepository;&#10;    private ExpenseAdapter expenseAdapter;&#10;    private List&lt;Expense&gt; expenseList = new ArrayList&lt;&gt;();&#10;&#10;    public ExpensesFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Use this factory method to create a new instance of&#10;     * this fragment using the provided parameters.&#10;     *&#10;     * @param param1 Parameter 1.&#10;     * @param param2 Parameter 2.&#10;     * @return A new instance of fragment ExpensesFragment.&#10;     */&#10;    // TODO: Rename and change types and number of parameters&#10;    public static ExpensesFragment newInstance(String param1, String param2) {&#10;        ExpensesFragment fragment = new ExpensesFragment();&#10;        Bundle args = new Bundle();&#10;        args.putString(ARG_PARAM1, param1);&#10;        args.putString(ARG_PARAM2, param2);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            // TODO: Rename and change types of parameters&#10;            String mParam1 = getArguments().getString(ARG_PARAM1);&#10;            String mParam2 = getArguments().getString(ARG_PARAM2);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_expenses, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        recyclerViewExpenses = view.findViewById(R.id.recyclerViewExpenses);&#10;        fabAddExpense = view.findViewById(R.id.fabAddExpense);&#10;&#10;        expenseRepository = new ExpenseRepository(getContext());&#10;&#10;        recyclerViewExpenses.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        expenseAdapter = new ExpenseAdapter(expenseList);&#10;        recyclerViewExpenses.setAdapter(expenseAdapter);&#10;&#10;        fabAddExpense.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(getActivity(), AddExpenseActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        loadExpenses();&#10;    }&#10;&#10;    private void loadExpenses() {&#10;        expenseList.clear();&#10;        expenseList.addAll(expenseRepository.getAllExpenses());&#10;        expenseAdapter.notifyDataSetChanged();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.adapter.ExpenseAdapter;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * A simple {@link Fragment} subclass.&#10; * Use the {@link ExpensesFragment#newInstance} factory method to&#10; * create an instance of this fragment.&#10; */&#10;public class ExpensesFragment extends Fragment {&#10;&#10;    // TODO: Rename parameter arguments, choose names that match&#10;    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER&#10;    private static final String ARG_PARAM1 = &quot;param1&quot;;&#10;    private static final String ARG_PARAM2 = &quot;param2&quot;;&#10;&#10;    private RecyclerView recyclerViewExpenses;&#10;    private FloatingActionButton fabAddExpense;&#10;    private ExpenseRepository expenseRepository;&#10;    private ExpenseAdapter expenseAdapter;&#10;    private List&lt;Expense&gt; expenseList = new ArrayList&lt;&gt;();&#10;&#10;    public ExpensesFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Use this factory method to create a new instance of&#10;     * this fragment using the provided parameters.&#10;     *&#10;     * @param param1 Parameter 1.&#10;     * @param param2 Parameter 2.&#10;     * @return A new instance of fragment ExpensesFragment.&#10;     */&#10;    // TODO: Rename and change types and number of parameters&#10;    public static ExpensesFragment newInstance(String param1, String param2) {&#10;        ExpensesFragment fragment = new ExpensesFragment();&#10;        Bundle args = new Bundle();&#10;        args.putString(ARG_PARAM1, param1);&#10;        args.putString(ARG_PARAM2, param2);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            // TODO: Rename and change types of parameters&#10;            String mParam1 = getArguments().getString(ARG_PARAM1);&#10;            String mParam2 = getArguments().getString(ARG_PARAM2);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_expenses, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        recyclerViewExpenses = view.findViewById(R.id.recyclerViewExpenses);&#10;        fabAddExpense = view.findViewById(R.id.fabAddExpense);&#10;&#10;        expenseRepository = new ExpenseRepository(getContext());&#10;&#10;        recyclerViewExpenses.setLayoutManager(new LinearLayoutManager(getContext()));&#10;        expenseAdapter = new ExpenseAdapter(expenseList);&#10;        recyclerViewExpenses.setAdapter(expenseAdapter);&#10;&#10;        expenseAdapter.setOnItemClickListener(expense -&gt; {&#10;            Intent intent = new Intent(getActivity(), EditExpenseActivity.class);&#10;            intent.putExtra(&quot;expense&quot;, expense);&#10;            startActivity(intent);&#10;        });&#10;&#10;        fabAddExpense.setOnClickListener(v -&gt; {&#10;            Intent intent = new Intent(getActivity(), AddExpenseActivity.class);&#10;            startActivity(intent);&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public void onResume() {&#10;        super.onResume();&#10;        loadExpenses();&#10;    }&#10;&#10;    private void loadExpenses() {&#10;        expenseList.clear();&#10;        expenseList.addAll(expenseRepository.getAllExpenses());&#10;        expenseAdapter.notifyDataSetChanged();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/HomeFragment.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/HomeFragment.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import com.github.mikephil.charting.charts.LineChart;&#10;import com.github.mikephil.charting.charts.PieChart;&#10;import com.github.mikephil.charting.data.Entry;&#10;import com.github.mikephil.charting.data.LineData;&#10;import com.github.mikephil.charting.data.LineDataSet;&#10;import com.github.mikephil.charting.data.PieData;&#10;import com.github.mikephil.charting.data.PieDataSet;&#10;import com.github.mikephil.charting.data.PieEntry;&#10;import com.example.se07101campusexpenses.database.BudgetRepository;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;/**&#10; * A simple {@link Fragment} subclass.&#10; * Use the {@link HomeFragment#newInstance} factory method to&#10; * create an instance of this fragment.&#10; */&#10;public class HomeFragment extends Fragment {&#10;&#10;    private TextView tvTotalSpending, tvRemainingBudget;&#10;    private LineChart chart;&#10;    private PieChart pieChart;&#10;    private ExpenseRepository expenseRepository;&#10;    private BudgetRepository budgetRepository;&#10;&#10;    // TODO: Rename parameter arguments, choose names that match&#10;    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER&#10;    private static final String ARG_PARAM1 = &quot;param1&quot;;&#10;    private static final String ARG_PARAM2 = &quot;param2&quot;;&#10;&#10;    public HomeFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    /**&#10;     * Use this factory method to create a new instance of&#10;     * this fragment using the provided parameters.&#10;     *&#10;     * @param param1 Parameter 1.&#10;     * @param param2 Parameter 2.&#10;     * @return A new instance of fragment HomeFragment.&#10;     */&#10;    // TODO: Rename and change types and number of parameters&#10;    public static HomeFragment newInstance(String param1, String param2) {&#10;        HomeFragment fragment = new HomeFragment();&#10;        Bundle args = new Bundle();&#10;        args.putString(ARG_PARAM1, param1);&#10;        args.putString(ARG_PARAM2, param2);&#10;        fragment.setArguments(args);&#10;        return fragment;&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        if (getArguments() != null) {&#10;            // TODO: Rename and change types of parameters&#10;            String mParam1 = getArguments().getString(ARG_PARAM1);&#10;            String mParam2 = getArguments().getString(ARG_PARAM2);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_home, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        tvTotalSpending = view.findViewById(R.id.tvTotalSpending);&#10;        tvRemainingBudget = view.findViewById(R.id.tvRemainingBudget);&#10;        chart = view.findViewById(R.id.chart);&#10;        pieChart = view.findViewById(R.id.pieChart);&#10;&#10;        expenseRepository = new ExpenseRepository(getContext());&#10;        budgetRepository = new BudgetRepository(getContext());&#10;&#10;        updateSummary();&#10;        setupChart();&#10;        setupPieChart();&#10;    }&#10;&#10;    private void updateSummary() {&#10;        double totalSpending = expenseRepository.getTotalExpenses();&#10;        double totalBudget = budgetRepository.getTotalBudget();&#10;        double remainingBudget = totalBudget - totalSpending;&#10;&#10;        tvTotalSpending.setText(String.format(&quot;Total Spending: $%.2f&quot;, totalSpending));&#10;        tvRemainingBudget.setText(String.format(&quot;Remaining Budget: $%.2f&quot;, remainingBudget));&#10;    }&#10;&#10;    private void setupChart() {&#10;        List&lt;Entry&gt; entries = new ArrayList&lt;&gt;();&#10;        List&lt;Expense&gt; expenses = expenseRepository.getAllExpenses();&#10;        // Simple example: chart of expense amounts over time (index)&#10;        for (int i = 0; i &lt; expenses.size(); i++) {&#10;            entries.add(new Entry(i, (float) expenses.get(i).getAmount()));&#10;        }&#10;&#10;        LineDataSet dataSet = new LineDataSet(entries, &quot;Expense Trend&quot;);&#10;        LineData lineData = new LineData(dataSet);&#10;        chart.setData(lineData);&#10;        chart.invalidate(); // refresh&#10;    }&#10;&#10;    private void setupPieChart() {&#10;        List&lt;PieEntry&gt; entries = new ArrayList&lt;&gt;();&#10;        List&lt;Expense&gt; expenses = expenseRepository.getExpensesByCategory();&#10;&#10;        for (Expense expense : expenses) {&#10;            entries.add(new PieEntry((float) expense.getAmount(), expense.getCategory()));&#10;        }&#10;&#10;        PieDataSet dataSet = new PieDataSet(entries, &quot;Expenses by Category&quot;);&#10;        PieData pieData = new PieData(dataSet);&#10;        pieChart.setData(pieData);&#10;        pieChart.invalidate(); // refresh&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.annotation.Nullable;&#10;import androidx.fragment.app.Fragment;&#10;import com.github.mikephil.charting.charts.LineChart;&#10;import com.github.mikephil.charting.charts.PieChart;&#10;import com.github.mikephil.charting.data.Entry;&#10;import com.github.mikephil.charting.data.LineData;&#10;import com.github.mikephil.charting.data.LineDataSet;&#10;import com.github.mikephil.charting.data.PieData;&#10;import com.github.mikephil.charting.data.PieDataSet;&#10;import com.github.mikephil.charting.data.PieEntry;&#10;import com.example.se07101campusexpenses.database.BudgetRepository;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;/**&#10; * A simple {@link Fragment} subclass.&#10; * Use the {@link HomeFragment#newInstance} factory method to&#10; * create an instance of this fragment.&#10; */&#10;public class HomeFragment extends Fragment {&#10;&#10;    private TextView tvTotalSpending, tvRemainingBudget;&#10;    private LineChart chart;&#10;    private PieChart pieChart;&#10;    private ExpenseRepository expenseRepository;&#10;    private BudgetRepository budgetRepository;&#10;&#10;    public HomeFragment() {&#10;        // Required empty public constructor&#10;    }&#10;&#10;    @Override&#10;    public View onCreateView(LayoutInflater inflater, ViewGroup container,&#10;                             Bundle savedInstanceState) {&#10;        // Inflate the layout for this fragment&#10;        return inflater.inflate(R.layout.fragment_home, container, false);&#10;    }&#10;&#10;    @Override&#10;    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {&#10;        super.onViewCreated(view, savedInstanceState);&#10;&#10;        tvTotalSpending = view.findViewById(R.id.tvTotalSpending);&#10;        tvRemainingBudget = view.findViewById(R.id.tvRemainingBudget);&#10;        chart = view.findViewById(R.id.chart);&#10;        pieChart = view.findViewById(R.id.pieChart);&#10;&#10;        expenseRepository = new ExpenseRepository(requireContext());&#10;        budgetRepository = new BudgetRepository(requireActivity().getApplication());&#10;&#10;        updateSummary();&#10;        setupChart();&#10;        setupPieChart();&#10;    }&#10;&#10;    private void updateSummary() {&#10;        double totalSpending = expenseRepository.getTotalExpenses();&#10;        double totalBudget = budgetRepository.getTotalBudget();&#10;        double remainingBudget = totalBudget - totalSpending;&#10;&#10;        tvTotalSpending.setText(String.format(Locale.US, &quot;Total Spending: $%.2f&quot;, totalSpending));&#10;        tvRemainingBudget.setText(String.format(Locale.US, &quot;Remaining Budget: $%.2f&quot;, remainingBudget));&#10;    }&#10;&#10;    private void setupChart() {&#10;        List&lt;Entry&gt; entries = new ArrayList&lt;&gt;();&#10;        List&lt;Expense&gt; expenses = expenseRepository.getAllExpenses();&#10;        // Simple example: chart of expense amounts over time (index)&#10;        for (int i = 0; i &lt; expenses.size(); i++) {&#10;            entries.add(new Entry(i, (float) expenses.get(i).getAmount()));&#10;        }&#10;&#10;        LineDataSet dataSet = new LineDataSet(entries, &quot;Expense Trend&quot;);&#10;        LineData lineData = new LineData(dataSet);&#10;        chart.setData(lineData);&#10;        chart.invalidate(); // refresh&#10;    }&#10;&#10;    private void setupPieChart() {&#10;        List&lt;PieEntry&gt; entries = new ArrayList&lt;&gt;();&#10;        List&lt;Expense&gt; expenses = expenseRepository.getExpensesByCategory();&#10;&#10;        for (Expense expense : expenses) {&#10;            entries.add(new PieEntry((float) expense.getAmount(), expense.getCategory()));&#10;        }&#10;&#10;        PieDataSet dataSet = new PieDataSet(entries, &quot;Expenses by Category&quot;);&#10;        PieData pieData = new PieData(dataSet);&#10;        pieChart.setData(pieData);&#10;        pieChart.invalidate(); // refresh&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/MainActivity.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.os.Bundle;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.app.AlarmManager;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.app.PendingIntent;&#10;&#10;import androidx.activity.EdgeToEdge;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.graphics.Insets;&#10;import androidx.core.view.ViewCompat;&#10;import androidx.core.view.WindowInsetsCompat;&#10;&#10;import com.example.se07101campusexpenses.service.NotificationService;&#10;import com.example.se07101campusexpenses.service.RecurringExpenseService;&#10;&#10;import java.util.Calendar;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        EdgeToEdge.enable(this);&#10;        setContentView(R.layout.activity_main);&#10;        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -&gt; {&#10;            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());&#10;            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);&#10;            return insets;&#10;        });&#10;&#10;        scheduleRecurringExpenseService();&#10;        scheduleNotificationService();&#10;    }&#10;&#10;    private void scheduleRecurringExpenseService() {&#10;        Intent intent = new Intent(this, RecurringExpenseService.class);&#10;        PendingIntent pendingIntent = PendingIntent.getService(this, 0, intent, 0);&#10;        AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);&#10;        // Run the service once a day&#10;        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), AlarmManager.INTERVAL_DAY, pendingIntent);&#10;    }&#10;&#10;    private void scheduleNotificationService() {&#10;        Intent intent = new Intent(this, NotificationService.class);&#10;        PendingIntent pendingIntent = PendingIntent.getService(this, 1, intent, 0);&#10;        AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);&#10;        // Run the service every hour&#10;        alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), AlarmManager.INTERVAL_HOUR, pendingIntent);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/RecurringExpenseActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/RecurringExpenseActivity.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.adapter.RecurringExpenseAdapter;&#10;import com.example.se07101campusexpenses.database.RecurringExpenseDao;&#10;import com.example.se07101campusexpenses.database.AppDatabase;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;public class RecurringExpenseActivity extends AppCompatActivity {&#10;&#10;    private RecyclerView rvRecurringExpenses;&#10;    private Button btnAddRecurringExpense;&#10;    private RecurringExpenseAdapter adapter;&#10;    private RecurringExpenseDao recurringExpenseDao;&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_recurring_expense);&#10;&#10;        rvRecurringExpenses = findViewById(R.id.rvRecurringExpenses);&#10;        btnAddRecurringExpense = findViewById(R.id.btnAddRecurringExpense);&#10;&#10;        // recurringExpenseDao = AppDatabase.getInstance(this).recurringExpenseDao();&#10;&#10;        rvRecurringExpenses.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        // int userId = getCurrentUserId();&#10;        // List&lt;RecurringExpense&gt; recurringExpenses = recurringExpenseDao.getRecurringExpensesByUser(userId);&#10;        // adapter = new RecurringExpenseAdapter(recurringExpenses);&#10;        // rvRecurringExpenses.setAdapter(adapter);&#10;&#10;        btnAddRecurringExpense.setOnClickListener(v -&gt; {&#10;            startActivity(new Intent(RecurringExpenseActivity.this, AddRecurringExpenseActivity.class));&#10;        });&#10;    }&#10;&#10;    private int getCurrentUserId() {&#10;        // Implement logic to get the current user's ID&#10;        return 1; // Placeholder&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses;&#10;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.widget.Button;&#10;import androidx.annotation.Nullable;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.adapter.RecurringExpenseAdapter;&#10;import com.example.se07101campusexpenses.database.AppDatabase;&#10;import com.example.se07101campusexpenses.database.RecurringExpenseDao;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;public class RecurringExpenseActivity extends AppCompatActivity {&#10;&#10;    @Override&#10;    protected void onCreate(@Nullable Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_recurring_expense);&#10;&#10;        RecyclerView rvRecurringExpenses = findViewById(R.id.rvRecurringExpenses);&#10;        Button btnAddRecurringExpense = findViewById(R.id.btnAddRecurringExpense);&#10;&#10;        RecurringExpenseDao recurringExpenseDao = AppDatabase.getInstance(this).recurringExpenseDao();&#10;&#10;        rvRecurringExpenses.setLayoutManager(new LinearLayoutManager(this));&#10;&#10;        int userId = getCurrentUserId();&#10;        AppDatabase.databaseWriteExecutor.execute(() -&gt; {&#10;            List&lt;RecurringExpense&gt; recurringExpenses = recurringExpenseDao.getRecurringExpensesByUser(userId);&#10;            runOnUiThread(() -&gt; {&#10;                RecurringExpenseAdapter adapter = new RecurringExpenseAdapter(recurringExpenses);&#10;                rvRecurringExpenses.setAdapter(adapter);&#10;            });&#10;        });&#10;&#10;        btnAddRecurringExpense.setOnClickListener(v -&gt; startActivity(new Intent(RecurringExpenseActivity.this, AddRecurringExpenseActivity.class)));&#10;    }&#10;&#10;    private int getCurrentUserId() {&#10;        // Implement logic to get the current user's ID&#10;        return 1; // Placeholder&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/ExpenseAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/ExpenseAdapter.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;&#10;import java.util.List;&#10;&#10;public class ExpenseAdapter extends RecyclerView.Adapter&lt;ExpenseAdapter.ExpenseViewHolder&gt; {&#10;&#10;    private List&lt;Expense&gt; expenseList;&#10;    private OnItemClickListener listener;&#10;&#10;    public interface OnItemClickListener {&#10;        void onItemClick(Expense expense);&#10;    }&#10;&#10;    public void setOnItemClickListener(OnItemClickListener listener) {&#10;        this.listener = listener;&#10;    }&#10;&#10;    public ExpenseAdapter(List&lt;Expense&gt; expenseList) {&#10;        this.expenseList = expenseList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ExpenseViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View itemView = LayoutInflater.from(parent.getContext())&#10;                .inflate(R.layout.expense_item, parent, false);&#10;        return new ExpenseViewHolder(itemView);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ExpenseViewHolder holder, int position) {&#10;        Expense currentExpense = expenseList.get(position);&#10;        holder.tvExpenseDescription.setText(currentExpense.getDescription());&#10;        holder.tvExpenseCategory.setText(currentExpense.getCategory());&#10;        holder.tvExpenseAmount.setText(String.format(&quot;Amount: $%.2f&quot;, currentExpense.getAmount()));&#10;        holder.tvExpenseDate.setText(currentExpense.getDate());&#10;&#10;        holder.itemView.setOnClickListener(v -&gt; {&#10;            if (listener != null) {&#10;                listener.onItemClick(currentExpense);&#10;            }&#10;        });&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return expenseList.size();&#10;    }&#10;&#10;    static class ExpenseViewHolder extends RecyclerView.ViewHolder {&#10;        private TextView tvExpenseDescription;&#10;        private TextView tvExpenseCategory;&#10;        private TextView tvExpenseAmount;&#10;        private TextView tvExpenseDate;&#10;&#10;        public ExpenseViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvExpenseDescription = itemView.findViewById(R.id.tvExpenseDescription);&#10;            tvExpenseCategory = itemView.findViewById(R.id.tvExpenseCategory);&#10;            tvExpenseAmount = itemView.findViewById(R.id.tvExpenseAmount);&#10;            tvExpenseDate = itemView.findViewById(R.id.tvExpenseDate);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/ExpenseReportAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/ExpenseReportAdapter.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import java.util.List;&#10;&#10;public class ExpenseReportAdapter extends RecyclerView.Adapter&lt;ExpenseReportAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;Expense&gt; expenseList;&#10;&#10;    public ExpenseReportAdapter(List&lt;Expense&gt; expenseList) {&#10;        this.expenseList = expenseList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.expense_item, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        Expense expense = expenseList.get(position);&#10;        holder.tvDescription.setText(expense.getDescription());&#10;        holder.tvAmount.setText(String.valueOf(expense.getAmount()));&#10;        holder.tvCategory.setText(expense.getCategory());&#10;        holder.tvDate.setText(expense.getDate());&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return expenseList.size();&#10;    }&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvDescription, tvAmount, tvCategory, tvDate;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvDescription = itemView.findViewById(R.id.tvDescription);&#10;            tvAmount = itemView.findViewById(R.id.tvAmount);&#10;            tvCategory = itemView.findViewById(R.id.tvCategory);&#10;            tvDate = itemView.findViewById(R.id.tvDate);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/RecurringExpenseAdapter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/adapter/RecurringExpenseAdapter.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;public class RecurringExpenseAdapter extends RecyclerView.Adapter&lt;RecurringExpenseAdapter.ViewHolder&gt; {&#10;&#10;    private List&lt;RecurringExpense&gt; recurringExpenseList;&#10;&#10;    public RecurringExpenseAdapter(List&lt;RecurringExpense&gt; recurringExpenseList) {&#10;        this.recurringExpenseList = recurringExpenseList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.expense_item, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        RecurringExpense expense = recurringExpenseList.get(position);&#10;        holder.tvDescription.setText(expense.description);&#10;        holder.tvAmount.setText(String.valueOf(expense.amount));&#10;        holder.tvCategory.setText(expense.category);&#10;        holder.tvDate.setText(expense.startDate + &quot; to &quot; + expense.endDate);&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return recurringExpenseList.size();&#10;    }&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvDescription, tvAmount, tvCategory, tvDate;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvDescription = itemView.findViewById(R.id.tvDescription);&#10;            tvAmount = itemView.findViewById(R.id.tvAmount);&#10;            tvCategory = itemView.findViewById(R.id.tvCategory);&#10;            tvDate = itemView.findViewById(R.id.tvDate);&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.adapter;&#10;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.view.ViewGroup;&#10;import android.widget.TextView;&#10;import androidx.annotation.NonNull;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;public class RecurringExpenseAdapter extends RecyclerView.Adapter&lt;RecurringExpenseAdapter.ViewHolder&gt; {&#10;&#10;    private final List&lt;RecurringExpense&gt; recurringExpenseList;&#10;&#10;    public RecurringExpenseAdapter(List&lt;RecurringExpense&gt; recurringExpenseList) {&#10;        this.recurringExpenseList = recurringExpenseList;&#10;    }&#10;&#10;    @NonNull&#10;    @Override&#10;    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {&#10;        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.expense_item, parent, false);&#10;        return new ViewHolder(view);&#10;    }&#10;&#10;    @Override&#10;    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {&#10;        RecurringExpense expense = recurringExpenseList.get(position);&#10;        holder.tvDescription.setText(expense.description);&#10;        holder.tvAmount.setText(String.valueOf(expense.amount));&#10;        holder.tvCategory.setText(expense.category);&#10;        holder.tvDate.setText(holder.itemView.getContext().getString(R.string.date_range, expense.startDate, expense.endDate));&#10;    }&#10;&#10;    @Override&#10;    public int getItemCount() {&#10;        return recurringExpenseList.size();&#10;    }&#10;&#10;    public static class ViewHolder extends RecyclerView.ViewHolder {&#10;        TextView tvDescription, tvAmount, tvCategory, tvDate;&#10;&#10;        public ViewHolder(@NonNull View itemView) {&#10;            super(itemView);&#10;            tvDescription = itemView.findViewById(R.id.tvExpenseDescription);&#10;            tvAmount = itemView.findViewById(R.id.tvExpenseAmount);&#10;            tvCategory = itemView.findViewById(R.id.tvExpenseCategory);&#10;            tvDate = itemView.findViewById(R.id.tvExpenseDate);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/AppDatabase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/AppDatabase.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.content.Context;&#10;&#10;import androidx.room.Database;&#10;import androidx.room.Room;&#10;import androidx.room.RoomDatabase;&#10;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;@Database(entities = {RecurringExpense.class}, version = 1, exportSchema = false)&#10;public abstract class AppDatabase extends RoomDatabase {&#10;    public abstract RecurringExpenseDao recurringExpenseDao();&#10;&#10;    private static volatile AppDatabase INSTANCE;&#10;    private static final int NUMBER_OF_THREADS = 4;&#10;    static final ExecutorService databaseWriteExecutor =&#10;            Executors.newFixedThreadPool(NUMBER_OF_THREADS);&#10;&#10;    static AppDatabase getInstance(final Context context) {&#10;        if (INSTANCE == null) {&#10;            synchronized (AppDatabase.class) {&#10;                if (INSTANCE == null) {&#10;                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),&#10;                                    AppDatabase.class, &quot;campus_expense_database&quot;)&#10;                            .build();&#10;                }&#10;            }&#10;        }&#10;        return INSTANCE;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.content.Context;&#10;&#10;import androidx.room.Database;&#10;import androidx.room.Room;&#10;import androidx.room.RoomDatabase;&#10;&#10;import com.example.se07101campusexpenses.model.Budget;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;&#10;import java.util.concurrent.ExecutorService;&#10;import java.util.concurrent.Executors;&#10;&#10;@Database(entities = {RecurringExpense.class, Budget.class}, version = 2, exportSchema = false)&#10;public abstract class AppDatabase extends RoomDatabase {&#10;    public abstract RecurringExpenseDao recurringExpenseDao();&#10;    public abstract BudgetDao budgetDao();&#10;&#10;    private static volatile AppDatabase INSTANCE;&#10;    private static final int NUMBER_OF_THREADS = 4;&#10;    static final ExecutorService databaseWriteExecutor =&#10;            Executors.newFixedThreadPool(NUMBER_OF_THREADS);&#10;&#10;    static AppDatabase getInstance(final Context context) {&#10;        if (INSTANCE == null) {&#10;            synchronized (AppDatabase.class) {&#10;                if (INSTANCE == null) {&#10;                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),&#10;                                    AppDatabase.class, &quot;campus_expense_database&quot;)&#10;                            .fallbackToDestructiveMigration()&#10;                            .build();&#10;                }&#10;            }&#10;        }&#10;        return INSTANCE;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetDao.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import androidx.room.Dao;&#10;import androidx.room.Insert;&#10;import androidx.room.Query;&#10;import com.example.se07101campusexpenses.model.Budget;&#10;import java.util.List;&#10;&#10;@Dao&#10;public interface BudgetDao {&#10;    @Insert&#10;    void insert(Budget budget);&#10;&#10;    @Query(&quot;SELECT * FROM budgets&quot;)&#10;    List&lt;Budget&gt; getAllBudgets();&#10;&#10;    @Query(&quot;SELECT SUM(amount) FROM budgets&quot;)&#10;    double getTotalBudget();&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetModel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetModel.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;public class BudgetModel {&#10;    private int id;&#10;    private String budgetName;&#10;    private int budgetMoney;&#10;    private String budgetDescription;&#10;    private String createdAt;&#10;    private String updatedAt;&#10;&#10;    public BudgetModel(int id, String budgetName, int budgetMoney, String budgetDescription, String createdAt, String updatedAt){&#10;        this.id = id;&#10;        this.budgetName = budgetName;&#10;        this.budgetMoney = budgetMoney;&#10;        this.budgetDescription = budgetDescription;&#10;        this.createdAt = createdAt;&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getBudgetName() {&#10;        return budgetName;&#10;    }&#10;&#10;    public void setBudgetName(String budgetName) {&#10;        this.budgetName = budgetName;&#10;    }&#10;&#10;    public int getBudgetMoney() {&#10;        return budgetMoney;&#10;    }&#10;&#10;    public void setBudgetMoney(int budgetMoney) {&#10;        this.budgetMoney = budgetMoney;&#10;    }&#10;&#10;    public String getBudgetDescription() {&#10;        return budgetDescription;&#10;    }&#10;&#10;    public void setBudgetDescription(String budgetDescription) {&#10;        this.budgetDescription = budgetDescription;&#10;    }&#10;&#10;    public String getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(String createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public String getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(String updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#13;&#10;&#13;&#10;import java.io.Serializable;&#13;&#10;&#13;&#10;public class BudgetModel implements Serializable {&#13;&#10;    private int id;&#13;&#10;    private String name;&#13;&#10;    private double amount;&#13;&#10;    private String period;&#13;&#10;&#13;&#10;    public BudgetModel() {&#13;&#10;    }&#13;&#10;&#13;&#10;    public BudgetModel(int id, String name, double amount, String period) {&#13;&#10;        this.id = id;&#13;&#10;        this.name = name;&#13;&#10;        this.amount = amount;&#13;&#10;        this.period = period;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getId() {&#13;&#10;        return id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setId(int id) {&#13;&#10;        this.id = id;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getName() {&#13;&#10;        return name;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setName(String name) {&#13;&#10;        this.name = name;&#13;&#10;    }&#13;&#10;&#13;&#10;    public double getAmount() {&#13;&#10;        return amount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setAmount(double amount) {&#13;&#10;        this.amount = amount;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getPeriod() {&#13;&#10;        return period;&#13;&#10;    }&#13;&#10;&#13;&#10;    public void setPeriod(String period) {&#13;&#10;        this.period = period;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/BudgetRepository.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.app.Application;&#10;&#10;import com.example.se07101campusexpenses.model.Budget;&#10;&#10;import java.util.List;&#10;&#10;public class BudgetRepository {&#10;    private final BudgetDao budgetDao;&#10;    private final List&lt;BudgetModel&gt; allBudgets;&#10;&#10;    public BudgetRepository(Application application) {&#10;        AppDatabase db = AppDatabase.getInstance(application);&#10;        budgetDao = db.budgetDao();&#10;        allBudgets = budgetDao.getAllBudgets();&#10;    }&#10;&#10;    public List&lt;BudgetModel&gt; getAllBudgets() {&#10;        return allBudgets;&#10;    }&#10;&#10;    public void insert(Budget budget) {&#10;        AppDatabase.databaseWriteExecutor.execute(() -&gt; budgetDao.insert(budget));&#10;    }&#10;&#10;    public double getTotalBudget() {&#10;        return budgetDao.getTotalBudget();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.app.Application;&#10;&#10;import com.example.se07101campusexpenses.model.Budget;&#10;&#10;import java.util.List;&#10;&#10;public class BudgetRepository {&#10;    private final BudgetDao budgetDao;&#10;    private final List&lt;Budget&gt; allBudgets;&#10;&#10;    public BudgetRepository(Application application) {&#10;        AppDatabase db = AppDatabase.getInstance(application);&#10;        budgetDao = db.budgetDao();&#10;        allBudgets = budgetDao.getAllBudgets();&#10;    }&#10;&#10;    public List&lt;Budget&gt; getAllBudgets() {&#10;        return allBudgets;&#10;    }&#10;&#10;    public void insert(Budget budget) {&#10;        AppDatabase.databaseWriteExecutor.execute(() -&gt; budgetDao.insert(budget));&#10;    }&#10;&#10;    public double getTotalBudget() {&#10;        return budgetDao.getTotalBudget();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/DbHelper.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/DbHelper.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.content.Context;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.database.sqlite.SQLiteOpenHelper;&#10;&#10;import androidx.annotation.Nullable;&#10;&#10;public class DbHelper extends SQLiteOpenHelper {&#10;    public static final String DB_NAME = &quot;CampusExpense&quot;;&#10;    public static final int DB_VERSION = 2;&#10;&#10;    // Table User&#10;    public static final String DB_TABLE_USER = &quot;user&quot;;&#10;    public static final String COL_USER_ID = &quot;id&quot;;&#10;    public static final String COL_USER_USERNAME = &quot;username&quot;;&#10;    public static final String COL_USER_PASSWORD = &quot;password&quot;;&#10;    public static final String COL_USER_EMAIL = &quot;email&quot;;&#10;    public static final String COL_USER_PHONE = &quot;phone&quot;;&#10;    public static final String COL_USER_ROLE = &quot;role&quot;;&#10;    public static final String COL_CREATED_AT = &quot;created_at&quot;;&#10;&#10;    // Table Budget&#10;    public static final String DB_TABLE_BUDGET = &quot;budget&quot;;&#10;    public static final String COL_BUDGET_ID = &quot;id&quot;;&#10;    public static final String COL_BUDGET_NAME = &quot;name&quot;;&#10;    public static final String COL_BUDGET_AMOUNT = &quot;amount&quot;;&#10;    public static final String COL_BUDGET_PERIOD = &quot;period&quot;;&#10;&#10;    // Table Expenses&#10;    public static final String DB_TABLE_EXPENSES = &quot;expenses&quot;;&#10;    public static final String COL_EXPENSE_ID = &quot;id&quot;;&#10;    public static final String COL_EXPENSE_DESCRIPTION = &quot;description&quot;;&#10;    public static final String COL_EXPENSE_AMOUNT = &quot;amount&quot;;&#10;    public static final String COL_EXPENSE_DATE = &quot;date&quot;;&#10;    public static final String COL_EXPENSE_CATEGORY = &quot;category&quot;;&#10;    public static final String COL_EXPENSE_RECURRING = &quot;recurring&quot;;&#10;    public static final String COL_EXPENSE_RECURRING_START_DATE = &quot;recurring_start_date&quot;;&#10;    public static final String COL_EXPENSE_RECURRING_END_DATE = &quot;recurring_end_date&quot;;&#10;&#10;    // Table Recurring Expenses&#10;    public static final String DB_TABLE_RECURRING_EXPENSES = &quot;recurring_expenses&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_ID = &quot;id&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_DESCRIPTION = &quot;description&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_AMOUNT = &quot;amount&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_CATEGORY = &quot;category&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_FREQUENCY = &quot;frequency&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_START_DATE = &quot;start_date&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_END_DATE = &quot;end_date&quot;;&#10;    public static final String COL_RECURRING_EXPENSE_USER_ID = &quot;user_id&quot;;&#10;&#10;&#10;    public DbHelper(@Nullable Context context) {&#10;        super(context, DB_NAME, null, DB_VERSION);&#10;    }&#10;&#10;    @Override&#10;    public void onCreate(SQLiteDatabase db) {&#10;        // sql create table user&#10;        String sql_user = &quot;CREATE TABLE &quot; + DB_TABLE_USER + &quot;(&quot; +&#10;                COL_USER_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_USER_USERNAME + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_PASSWORD + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_EMAIL + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_PHONE + &quot; TEXT NOT NULL, &quot; +&#10;                COL_USER_ROLE + &quot; INTEGER, &quot; +&#10;                COL_CREATED_AT + &quot; TEXT NOT NULL&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_user);&#10;&#10;        // sql create table budget&#10;        String sql_budget = &quot;CREATE TABLE &quot; + DB_TABLE_BUDGET + &quot;(&quot; +&#10;                COL_BUDGET_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_BUDGET_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                COL_BUDGET_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                COL_BUDGET_PERIOD + &quot; TEXT NOT NULL&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_budget);&#10;&#10;        // sql create table expenses&#10;        String sql_expenses = &quot;CREATE TABLE &quot; + DB_TABLE_EXPENSES + &quot;(&quot; +&#10;                COL_EXPENSE_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_EXPENSE_DESCRIPTION + &quot; TEXT NOT NULL, &quot; +&#10;                COL_EXPENSE_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                COL_EXPENSE_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                COL_EXPENSE_CATEGORY + &quot; TEXT NOT NULL, &quot; +&#10;                COL_EXPENSE_RECURRING + &quot; INTEGER DEFAULT 0, &quot; +&#10;                COL_EXPENSE_RECURRING_START_DATE + &quot; TEXT, &quot; +&#10;                COL_EXPENSE_RECURRING_END_DATE + &quot; TEXT&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_expenses);&#10;&#10;        // sql create table recurring expenses&#10;        String sql_recurring_expenses = &quot;CREATE TABLE &quot; + DB_TABLE_RECURRING_EXPENSES + &quot;(&quot; +&#10;                COL_RECURRING_EXPENSE_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                COL_RECURRING_EXPENSE_DESCRIPTION + &quot; TEXT NOT NULL, &quot; +&#10;                COL_RECURRING_EXPENSE_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                COL_RECURRING_EXPENSE_CATEGORY + &quot; TEXT NOT NULL, &quot; +&#10;                COL_RECURRING_EXPENSE_FREQUENCY + &quot; TEXT NOT NULL, &quot; +&#10;                COL_RECURRING_EXPENSE_START_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                COL_RECURRING_EXPENSE_END_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                COL_RECURRING_EXPENSE_USER_ID + &quot; INTEGER NOT NULL&quot; +&#10;                &quot;)&quot;;&#10;        db.execSQL(sql_recurring_expenses);&#10;    }&#10;&#10;    @Override&#10;    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {&#10;        if (oldVersion &lt; 2) {&#10;            db.execSQL(&quot;ALTER TABLE &quot; + DB_TABLE_USER + &quot; ADD COLUMN &quot; + COL_USER_PHONE + &quot; TEXT NOT NULL DEFAULT ''&quot;);&#10;            db.execSQL(&quot;ALTER TABLE &quot; + DB_TABLE_USER + &quot; ADD COLUMN &quot; + COL_USER_ROLE + &quot; INTEGER DEFAULT 0&quot;);&#10;            db.execSQL(&quot;ALTER TABLE &quot; + DB_TABLE_USER + &quot; ADD COLUMN &quot; + COL_CREATED_AT + &quot; TEXT NOT NULL DEFAULT ''&quot;);&#10;            String sql_budget = &quot;CREATE TABLE &quot; + DB_TABLE_BUDGET + &quot;(&quot; +&#10;                    COL_BUDGET_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COL_BUDGET_NAME + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_BUDGET_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                    COL_BUDGET_PERIOD + &quot; TEXT NOT NULL&quot; +&#10;                    &quot;)&quot;;&#10;            db.execSQL(sql_budget);&#10;            String sql_expenses = &quot;CREATE TABLE &quot; + DB_TABLE_EXPENSES + &quot;(&quot; +&#10;                    COL_EXPENSE_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COL_EXPENSE_DESCRIPTION + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_EXPENSE_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                    COL_EXPENSE_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_EXPENSE_CATEGORY + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_EXPENSE_RECURRING + &quot; INTEGER DEFAULT 0, &quot; +&#10;                    COL_EXPENSE_RECURRING_START_DATE + &quot; TEXT, &quot; +&#10;                    COL_EXPENSE_RECURRING_END_DATE + &quot; TEXT&quot; +&#10;                    &quot;)&quot;;&#10;            db.execSQL(sql_expenses);&#10;            // sql create table recurring expenses&#10;            String sql_recurring_expenses = &quot;CREATE TABLE &quot; + DB_TABLE_RECURRING_EXPENSES + &quot;(&quot; +&#10;                    COL_RECURRING_EXPENSE_ID + &quot; INTEGER PRIMARY KEY AUTOINCREMENT, &quot; +&#10;                    COL_RECURRING_EXPENSE_DESCRIPTION + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_RECURRING_EXPENSE_AMOUNT + &quot; REAL NOT NULL, &quot; +&#10;                    COL_RECURRING_EXPENSE_CATEGORY + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_RECURRING_EXPENSE_FREQUENCY + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_RECURRING_EXPENSE_START_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_RECURRING_EXPENSE_END_DATE + &quot; TEXT NOT NULL, &quot; +&#10;                    COL_RECURRING_EXPENSE_USER_ID + &quot; INTEGER NOT NULL&quot; +&#10;                    &quot;)&quot;;&#10;            db.execSQL(sql_recurring_expenses);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/Expense.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/Expense.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;public class Expense {&#10;    private int id;&#10;    private String description;&#10;    private double amount;&#10;    private String date;&#10;    private String category;&#10;    private boolean recurring;&#10;    private String recurringStartDate;&#10;    private String recurringEndDate;&#10;&#10;    public Expense() {&#10;    }&#10;&#10;    public Expense(int id, String description, double amount, String date, String category, boolean recurring, String recurringStartDate, String recurringEndDate) {&#10;        this.id = id;&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.date = date;&#10;        this.category = category;&#10;        this.recurring = recurring;&#10;        this.recurringStartDate = recurringStartDate;&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public double getAmount() {&#10;        return amount;&#10;    }&#10;&#10;    public void setAmount(double amount) {&#10;        this.amount = amount;&#10;    }&#10;&#10;    public String getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(String date) {&#10;        this.date = date;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public boolean isRecurring() {&#10;        return recurring;&#10;    }&#10;&#10;    public void setRecurring(boolean recurring) {&#10;        this.recurring = recurring;&#10;    }&#10;&#10;    public String getRecurringStartDate() {&#10;        return recurringStartDate;&#10;    }&#10;&#10;    public void setRecurringStartDate(String recurringStartDate) {&#10;        this.recurringStartDate = recurringStartDate;&#10;    }&#10;&#10;    public String getRecurringEndDate() {&#10;        return recurringEndDate;&#10;    }&#10;&#10;    public void setRecurringEndDate(String recurringEndDate) {&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import java.io.Serializable;&#10;&#10;public class Expense implements Serializable {&#10;    private int id;&#10;    private String description;&#10;    private double amount;&#10;    private String date;&#10;    private String category;&#10;    private boolean recurring;&#10;    private String recurringStartDate;&#10;    private String recurringEndDate;&#10;&#10;    public Expense() {&#10;    }&#10;&#10;    public Expense(int id, String description, double amount, String date, String category, boolean recurring, String recurringStartDate, String recurringEndDate) {&#10;        this.id = id;&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.date = date;&#10;        this.category = category;&#10;        this.recurring = recurring;&#10;        this.recurringStartDate = recurringStartDate;&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(int id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getDescription() {&#10;        return description;&#10;    }&#10;&#10;    public void setDescription(String description) {&#10;        this.description = description;&#10;    }&#10;&#10;    public double getAmount() {&#10;        return amount;&#10;    }&#10;&#10;    public void setAmount(double amount) {&#10;        this.amount = amount;&#10;    }&#10;&#10;    public String getDate() {&#10;        return date;&#10;    }&#10;&#10;    public void setDate(String date) {&#10;        this.date = date;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public boolean isRecurring() {&#10;        return recurring;&#10;    }&#10;&#10;    public void setRecurring(boolean recurring) {&#10;        this.recurring = recurring;&#10;    }&#10;&#10;    public String getRecurringStartDate() {&#10;        return recurringStartDate;&#10;    }&#10;&#10;    public void setRecurringStartDate(String recurringStartDate) {&#10;        this.recurringStartDate = recurringStartDate;&#10;    }&#10;&#10;    public String getRecurringEndDate() {&#10;        return recurringEndDate;&#10;    }&#10;&#10;    public void setRecurringEndDate(String recurringEndDate) {&#10;        this.recurringEndDate = recurringEndDate;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/ExpenseRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/ExpenseRepository.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ExpenseRepository {&#10;    private DbHelper dbHelper;&#10;&#10;    public ExpenseRepository(Context context) {&#10;        dbHelper = new DbHelper(context);&#10;    }&#10;&#10;    public long addExpense(Expense expense) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_EXPENSE_DESCRIPTION, expense.getDescription());&#10;        values.put(DbHelper.COL_EXPENSE_AMOUNT, expense.getAmount());&#10;        values.put(DbHelper.COL_EXPENSE_DATE, expense.getDate());&#10;        values.put(DbHelper.COL_EXPENSE_CATEGORY, expense.getCategory());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING, expense.isRecurring() ? 1 : 0);&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_START_DATE, expense.getRecurringStartDate());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_END_DATE, expense.getRecurringEndDate());&#10;        long id = db.insert(DbHelper.DB_TABLE_EXPENSES, null, values);&#10;        db.close();&#10;        return id;&#10;    }&#10;&#10;    public int updateExpense(Expense expense) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_EXPENSE_DESCRIPTION, expense.getDescription());&#10;        values.put(DbHelper.COL_EXPENSE_AMOUNT, expense.getAmount());&#10;        values.put(DbHelper.COL_EXPENSE_DATE, expense.getDate());&#10;        values.put(DbHelper.COL_EXPENSE_CATEGORY, expense.getCategory());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING, expense.isRecurring() ? 1 : 0);&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_START_DATE, expense.getRecurringStartDate());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_END_DATE, expense.getRecurringEndDate());&#10;        return db.update(DbHelper.DB_TABLE_EXPENSES, values, DbHelper.COL_EXPENSE_ID + &quot; = ?&quot;,&#10;                new String[]{String.valueOf(expense.getId())});&#10;    }&#10;&#10;    public void deleteExpense(long id) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        db.delete(DbHelper.DB_TABLE_EXPENSES, DbHelper.COL_EXPENSE_ID + &quot; = ?&quot;,&#10;                new String[]{String.valueOf(id)});&#10;        db.close();&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getAllExpenses() {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        String selectQuery = &quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_EXPENSES;&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        Cursor cursor = db.rawQuery(selectQuery, null);&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setId(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_ID)));&#10;                expense.setDescription(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DESCRIPTION)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expense.setDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DATE)));&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setRecurring(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING)) == 1);&#10;                expense.setRecurringStartDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_START_DATE)));&#10;                expense.setRecurringEndDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_END_DATE)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public boolean hasExpenseForMonth(String description, int year, int month) {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT COUNT(*) FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DESCRIPTION + &quot; = ? AND &quot; +&#10;                &quot;strftime('%Y', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ? AND &quot; +&#10;                &quot;strftime('%m', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{description, String.valueOf(year), String.format(&quot;%02d&quot;, month)});&#10;        boolean exists = false;&#10;        if (cursor.moveToFirst()) {&#10;            exists = cursor.getInt(0) &gt; 0;&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return exists;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public boolean hasExpenseForWeek(String description, int year, int weekOfYear) {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT COUNT(*) FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DESCRIPTION + &quot; = ? AND &quot; +&#10;                &quot;strftime('%Y', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ? AND &quot; +&#10;                &quot;strftime('%W', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{description, String.valueOf(year), String.format(&quot;%02d&quot;, weekOfYear)});&#10;        boolean exists = false;&#10;        if (cursor.moveToFirst()) {&#10;            exists = cursor.getInt(0) &gt; 0;&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return exists;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public double getTotalExpensesForCategory(String category) {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_CATEGORY + &quot; = ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{category});&#10;        double total = 0;&#10;        if (cursor.moveToFirst()) {&#10;            total = cursor.getDouble(0);&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return total;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public double getTotalExpenses() {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) FROM &quot; + DbHelper.DB_TABLE_EXPENSES;&#10;        Cursor cursor = db.rawQuery(query, null);&#10;        double total = 0;&#10;        if (cursor.moveToFirst()) {&#10;            total = cursor.getDouble(0);&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return total;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getExpensesBetweenDates(String startDate, String endDate) {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DATE + &quot; BETWEEN ? AND ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{startDate, endDate});&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setId(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_ID)));&#10;                expense.setDescription(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DESCRIPTION)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expense.setDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DATE)));&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setRecurring(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING)) == 1);&#10;                expense.setRecurringStartDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_START_DATE)));&#10;                expense.setRecurringEndDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_END_DATE)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getExpensesByCategory() {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT &quot; + DbHelper.COL_EXPENSE_CATEGORY + &quot;, SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) as &quot; + DbHelper.COL_EXPENSE_AMOUNT +&#10;                &quot; FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; GROUP BY &quot; + DbHelper.COL_EXPENSE_CATEGORY;&#10;        Cursor cursor = db.rawQuery(query, null);&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getExpensesByCategoryBetweenDates(String startDate, String endDate) {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT &quot; + DbHelper.COL_EXPENSE_CATEGORY + &quot;, SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) as &quot; + DbHelper.COL_EXPENSE_AMOUNT +&#10;                &quot; FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DATE + &quot; BETWEEN ? AND ?&quot; +&#10;                &quot; GROUP BY &quot; + DbHelper.COL_EXPENSE_CATEGORY;&#10;        Cursor cursor = db.rawQuery(query, new String[]{startDate, endDate});&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.annotation.SuppressLint;&#10;import android.content.ContentValues;&#10;import android.content.Context;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class ExpenseRepository {&#10;    private final DbHelper dbHelper;&#10;&#10;    public ExpenseRepository(Context context) {&#10;        dbHelper = new DbHelper(context);&#10;    }&#10;&#10;    public long addExpense(Expense expense) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_EXPENSE_DESCRIPTION, expense.getDescription());&#10;        values.put(DbHelper.COL_EXPENSE_AMOUNT, expense.getAmount());&#10;        values.put(DbHelper.COL_EXPENSE_DATE, expense.getDate());&#10;        values.put(DbHelper.COL_EXPENSE_CATEGORY, expense.getCategory());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING, expense.isRecurring() ? 1 : 0);&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_START_DATE, expense.getRecurringStartDate());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_END_DATE, expense.getRecurringEndDate());&#10;        long id = db.insert(DbHelper.DB_TABLE_EXPENSES, null, values);&#10;        db.close();&#10;        return id;&#10;    }&#10;&#10;    public int updateExpense(Expense expense) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        ContentValues values = new ContentValues();&#10;        values.put(DbHelper.COL_EXPENSE_DESCRIPTION, expense.getDescription());&#10;        values.put(DbHelper.COL_EXPENSE_AMOUNT, expense.getAmount());&#10;        values.put(DbHelper.COL_EXPENSE_DATE, expense.getDate());&#10;        values.put(DbHelper.COL_EXPENSE_CATEGORY, expense.getCategory());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING, expense.isRecurring() ? 1 : 0);&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_START_DATE, expense.getRecurringStartDate());&#10;        values.put(DbHelper.COL_EXPENSE_RECURRING_END_DATE, expense.getRecurringEndDate());&#10;        return db.update(DbHelper.DB_TABLE_EXPENSES, values, DbHelper.COL_EXPENSE_ID + &quot; = ?&quot;,&#10;                new String[]{String.valueOf(expense.getId())});&#10;    }&#10;&#10;    public void deleteExpense(long id) {&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        db.delete(DbHelper.DB_TABLE_EXPENSES, DbHelper.COL_EXPENSE_ID + &quot; = ?&quot;,&#10;                new String[]{String.valueOf(id)});&#10;        db.close();&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getAllExpenses() {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        String selectQuery = &quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_EXPENSES;&#10;        SQLiteDatabase db = dbHelper.getWritableDatabase();&#10;        Cursor cursor = db.rawQuery(selectQuery, null);&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setId(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_ID)));&#10;                expense.setDescription(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DESCRIPTION)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expense.setDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DATE)));&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setRecurring(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING)) == 1);&#10;                expense.setRecurringStartDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_START_DATE)));&#10;                expense.setRecurringEndDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_END_DATE)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public boolean hasExpenseForMonth(String description, int year, int month) {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT COUNT(*) FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DESCRIPTION + &quot; = ? AND &quot; +&#10;                &quot;strftime('%Y', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ? AND &quot; +&#10;                &quot;strftime('%m', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{description, String.valueOf(year), String.format(Locale.US, &quot;%02d&quot;, month)});&#10;        boolean exists = false;&#10;        if (cursor.moveToFirst()) {&#10;            exists = cursor.getInt(0) &gt; 0;&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return exists;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public boolean hasExpenseForWeek(String description, int year, int weekOfYear) {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT COUNT(*) FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DESCRIPTION + &quot; = ? AND &quot; +&#10;                &quot;strftime('%Y', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ? AND &quot; +&#10;                &quot;strftime('%W', &quot; + DbHelper.COL_EXPENSE_DATE + &quot;) = ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{description, String.valueOf(year), String.format(Locale.US, &quot;%02d&quot;, weekOfYear)});&#10;        boolean exists = false;&#10;        if (cursor.moveToFirst()) {&#10;            exists = cursor.getInt(0) &gt; 0;&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return exists;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public double getTotalExpensesForCategory(String category) {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_CATEGORY + &quot; = ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{category});&#10;        double total = 0;&#10;        if (cursor.moveToFirst()) {&#10;            total = cursor.getDouble(0);&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return total;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public double getTotalExpenses() {&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) FROM &quot; + DbHelper.DB_TABLE_EXPENSES;&#10;        Cursor cursor = db.rawQuery(query, null);&#10;        double total = 0;&#10;        if (cursor.moveToFirst()) {&#10;            total = cursor.getDouble(0);&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return total;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getExpensesBetweenDates(String startDate, String endDate) {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT * FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DATE + &quot; BETWEEN ? AND ?&quot;;&#10;        Cursor cursor = db.rawQuery(query, new String[]{startDate, endDate});&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setId(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_ID)));&#10;                expense.setDescription(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DESCRIPTION)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expense.setDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_DATE)));&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setRecurring(cursor.getInt(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING)) == 1);&#10;                expense.setRecurringStartDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_START_DATE)));&#10;                expense.setRecurringEndDate(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_RECURRING_END_DATE)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getExpensesByCategory() {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT &quot; + DbHelper.COL_EXPENSE_CATEGORY + &quot;, SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) as &quot; + DbHelper.COL_EXPENSE_AMOUNT +&#10;                &quot; FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; GROUP BY &quot; + DbHelper.COL_EXPENSE_CATEGORY;&#10;        Cursor cursor = db.rawQuery(query, null);&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;&#10;    @SuppressLint(&quot;Range&quot;)&#10;    public List&lt;Expense&gt; getExpensesByCategoryBetweenDates(String startDate, String endDate) {&#10;        List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;        SQLiteDatabase db = dbHelper.getReadableDatabase();&#10;        String query = &quot;SELECT &quot; + DbHelper.COL_EXPENSE_CATEGORY + &quot;, SUM(&quot; + DbHelper.COL_EXPENSE_AMOUNT + &quot;) as &quot; + DbHelper.COL_EXPENSE_AMOUNT +&#10;                &quot; FROM &quot; + DbHelper.DB_TABLE_EXPENSES +&#10;                &quot; WHERE &quot; + DbHelper.COL_EXPENSE_DATE + &quot; BETWEEN ? AND ?&quot; +&#10;                &quot; GROUP BY &quot; + DbHelper.COL_EXPENSE_CATEGORY;&#10;        Cursor cursor = db.rawQuery(query, new String[]{startDate, endDate});&#10;        if (cursor.moveToFirst()) {&#10;            do {&#10;                Expense expense = new Expense();&#10;                expense.setCategory(cursor.getString(cursor.getColumnIndex(DbHelper.COL_EXPENSE_CATEGORY)));&#10;                expense.setAmount(cursor.getDouble(cursor.getColumnIndex(DbHelper.COL_EXPENSE_AMOUNT)));&#10;                expenses.add(expense);&#10;            } while (cursor.moveToNext());&#10;        }&#10;        cursor.close();&#10;        db.close();&#10;        return expenses;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/RecurringExpenseDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/RecurringExpenseDao.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import androidx.room.Dao;&#10;import androidx.room.Insert;&#10;import androidx.room.Query;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;@Dao&#10;public interface RecurringExpenseDao {&#10;    @Insert&#10;    void insert(RecurringExpense recurringExpense);&#10;&#10;    @Query(&quot;SELECT * FROM recurring_expenses WHERE userId = :userId&quot;)&#10;    List&lt;RecurringExpense&gt; getRecurringExpensesByUser(int userId);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/RecurringExpenseRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/database/RecurringExpenseRepository.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.app.Application;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;public class RecurringExpenseRepository {&#10;    private RecurringExpenseDao recurringExpenseDao;&#10;    private List&lt;RecurringExpense&gt; allRecurringExpenses;&#10;&#10;    public RecurringExpenseRepository(Application application) {&#10;        // AppDatabase db = AppDatabase.getInstance(application);&#10;        // recurringExpenseDao = db.recurringExpenseDao();&#10;        // allRecurringExpenses = recurringExpenseDao.getAllRecurringExpenses();&#10;    }&#10;&#10;    public List&lt;RecurringExpense&gt; getAllRecurringExpenses() {&#10;        return allRecurringExpenses;&#10;    }&#10;&#10;    public void insert(RecurringExpense recurringExpense) {&#10;        // AppDatabase.databaseWriteExecutor.execute(() -&gt; {&#10;        //     recurringExpenseDao.insert(recurringExpense);&#10;        // });&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.database;&#10;&#10;import android.app.Application;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.util.List;&#10;&#10;public class RecurringExpenseRepository {&#10;    private final RecurringExpenseDao recurringExpenseDao;&#10;    private final List&lt;RecurringExpense&gt; allRecurringExpenses;&#10;&#10;    public RecurringExpenseRepository(Application application) {&#10;        AppDatabase db = AppDatabase.getInstance(application);&#10;        recurringExpenseDao = db.recurringExpenseDao();&#10;        allRecurringExpenses = recurringExpenseDao.getAllRecurringExpenses();&#10;    }&#10;&#10;    public List&lt;RecurringExpense&gt; getAllRecurringExpenses() {&#10;        return allRecurringExpenses;&#10;    }&#10;&#10;    public void insert(RecurringExpense recurringExpense) {&#10;        AppDatabase.databaseWriteExecutor.execute(() -&gt; recurringExpenseDao.insert(recurringExpense));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/model/Budget.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/model/Budget.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.model;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;budgets&quot;)&#10;public class Budget {&#10;    @PrimaryKey(autoGenerate = true)&#10;    public int id;&#10;    public String name;&#10;    public double amount;&#10;    public String period;&#10;    public int userId;&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public double getAmount() {&#10;        return amount;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/model/RecurringExpense.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/model/RecurringExpense.java" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.model;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;recurring_expenses&quot;)&#10;public class RecurringExpense {&#10;    @PrimaryKey(autoGenerate = true)&#10;    public int id;&#10;    public String description;&#10;    public double amount;&#10;    public String category;&#10;    public String frequency; // e.g., &quot;Monthly&quot;, &quot;Weekly&quot;&#10;    public String startDate;&#10;    public String endDate;&#10;    public int userId;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/service/NotificationService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/service/NotificationService.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.service;&#10;&#10;import android.app.NotificationChannel;&#10;import android.app.NotificationManager;&#10;import android.app.PendingIntent;&#10;import android.app.Service;&#10;import android.content.Intent;&#10;import android.os.Build;&#10;import android.os.IBinder;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.app.NotificationCompat;&#10;import com.example.se07101campusexpenses.MainActivity;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.database.BudgetRepository;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.example.se07101campusexpenses.model.Budget;&#10;import java.util.List;&#10;&#10;public class NotificationService extends Service {&#10;&#10;    private static final String CHANNEL_ID = &quot;BudgetChannel&quot;;&#10;    private BudgetRepository budgetRepository;&#10;    private ExpenseRepository expenseRepository;&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        budgetRepository = new BudgetRepository(getApplication());&#10;        expenseRepository = new ExpenseRepository(getApplication());&#10;        createNotificationChannel();&#10;    }&#10;&#10;    @Override&#10;    public int onStartCommand(Intent intent, int flags, int startId) {&#10;        new Thread(() -&gt; {&#10;            checkBudgets();&#10;            stopSelf();&#10;        }).start();&#10;        return START_NOT_STICKY;&#10;    }&#10;&#10;    private void checkBudgets() {&#10;        List&lt;Budget&gt; budgets = budgetRepository.getAllBudgets();&#10;        for (Budget budget : budgets) {&#10;            double totalExpenses = expenseRepository.getTotalExpensesForCategory(budget.getName());&#10;            if (totalExpenses &gt;= budget.getAmount()) {&#10;                sendNotification(&quot;Budget Exceeded&quot;, &quot;You have exceeded your budget for &quot; + budget.getName());&#10;            } else if (totalExpenses &gt;= budget.getAmount() * 0.9) {&#10;                sendNotification(&quot;Budget Alert&quot;, &quot;You are approaching your budget limit for &quot; + budget.getName());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void sendNotification(String title, String message) {&#10;        Intent intent = new Intent(this, MainActivity.class);&#10;        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);&#10;&#10;        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)&#10;                .setSmallIcon(R.drawable.ic_notification)&#10;                .setContentTitle(title)&#10;                .setContentText(message)&#10;                .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;                .setContentIntent(pendingIntent)&#10;                .setAutoCancel(true);&#10;&#10;        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);&#10;        notificationManager.notify((int) System.currentTimeMillis(), builder.build());&#10;    }&#10;&#10;    private void createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            CharSequence name = &quot;Budget Notifications&quot;;&#10;            String description = &quot;Notifications for budget alerts&quot;;&#10;            int importance = NotificationManager.IMPORTANCE_DEFAULT;&#10;            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);&#10;            channel.setDescription(description);&#10;            NotificationManager notificationManager = getSystemService(NotificationManager.class);&#10;            notificationManager.createNotificationChannel(channel);&#10;        }&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public IBinder onBind(Intent intent) {&#10;        return null;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.service;&#10;&#10;import android.app.NotificationChannel;&#10;import android.app.NotificationManager;&#10;import android.app.PendingIntent;&#10;import android.app.Service;&#10;import android.content.Intent;&#10;import android.os.Build;&#10;import android.os.IBinder;&#10;import androidx.annotation.Nullable;&#10;import androidx.core.app.NotificationCompat;&#10;import com.example.se07101campusexpenses.MainActivity;&#10;import com.example.se07101campusexpenses.R;&#10;import com.example.se07101campusexpenses.database.BudgetRepository;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.example.se07101campusexpenses.model.Budget;&#10;&#10;import java.util.List;&#10;&#10;public class NotificationService extends Service {&#10;&#10;    private static final String CHANNEL_ID = &quot;BudgetChannel&quot;;&#10;    private BudgetRepository budgetRepository;&#10;    private ExpenseRepository expenseRepository;&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        budgetRepository = new BudgetRepository(getApplication());&#10;        expenseRepository = new ExpenseRepository(getApplication());&#10;        createNotificationChannel();&#10;    }&#10;&#10;    @Override&#10;    public int onStartCommand(Intent intent, int flags, int startId) {&#10;        new Thread(() -&gt; {&#10;            checkBudgets();&#10;            stopSelf();&#10;        }).start();&#10;        return START_NOT_STICKY;&#10;    }&#10;&#10;    private void checkBudgets() {&#10;        List&lt;com.example.se07101campusexpenses.database.BudgetModel&gt; budgets = budgetRepository.getAllBudgets();&#10;        for (com.example.se07101campusexpenses.database.BudgetModel budget : budgets) {&#10;            double totalExpenses = expenseRepository.getTotalExpensesForCategory(budget.getName());&#10;            if (totalExpenses &gt;= budget.getAmount()) {&#10;                sendNotification(&quot;Budget Exceeded&quot;, &quot;You have exceeded your budget for &quot; + budget.getName());&#10;            } else if (totalExpenses &gt;= budget.getAmount() * 0.9) {&#10;                sendNotification(&quot;Budget Alert&quot;, &quot;You are approaching your budget limit for &quot; + budget.getName());&#10;            }&#10;        }&#10;    }&#10;&#10;    private void sendNotification(String title, String message) {&#10;        Intent intent = new Intent(this, MainActivity.class);&#10;        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_IMMUTABLE);&#10;&#10;        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID)&#10;                .setSmallIcon(R.drawable.ic_launcher_foreground)&#10;                .setContentTitle(title)&#10;                .setContentText(message)&#10;                .setPriority(NotificationCompat.PRIORITY_DEFAULT)&#10;                .setContentIntent(pendingIntent)&#10;                .setAutoCancel(true);&#10;&#10;        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);&#10;        notificationManager.notify((int) System.currentTimeMillis(), builder.build());&#10;    }&#10;&#10;    private void createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            CharSequence name = &quot;Budget Notifications&quot;;&#10;            String description = &quot;Notifications for budget alerts&quot;;&#10;            int importance = NotificationManager.IMPORTANCE_DEFAULT;&#10;            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, name, importance);&#10;            channel.setDescription(description);&#10;            NotificationManager notificationManager = getSystemService(NotificationManager.class);&#10;            notificationManager.createNotificationChannel(channel);&#10;        }&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public IBinder onBind(Intent intent) {&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/service/RecurringExpenseService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/se07101campusexpenses/service/RecurringExpenseService.java" />
              <option name="originalContent" value="package com.example.se07101campusexpenses.service;&#10;&#10;import android.app.Service;&#10;import android.content.Intent;&#10;import android.os.IBinder;&#10;import androidx.annotation.Nullable;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.example.se07101campusexpenses.database.RecurringExpenseRepository;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class RecurringExpenseService extends Service {&#10;&#10;    private RecurringExpenseRepository recurringExpenseRepository;&#10;    private ExpenseRepository expenseRepository;&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        recurringExpenseRepository = new RecurringExpenseRepository(getApplication());&#10;        expenseRepository = new ExpenseRepository(getApplication());&#10;    }&#10;&#10;    @Override&#10;    public int onStartCommand(Intent intent, int flags, int startId) {&#10;        new Thread(() -&gt; {&#10;            List&lt;RecurringExpense&gt; recurringExpenses = recurringExpenseRepository.getAllRecurringExpenses();&#10;            for (RecurringExpense recurringExpense : recurringExpenses) {&#10;                if (shouldCreateExpense(recurringExpense)) {&#10;                    createExpenseFromRecurring(recurringExpense);&#10;                }&#10;            }&#10;            stopSelf();&#10;        }).start();&#10;        return START_NOT_STICKY;&#10;    }&#10;&#10;    private boolean shouldCreateExpense(RecurringExpense recurringExpense) {&#10;        try {&#10;            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;            Date startDate = sdf.parse(recurringExpense.startDate);&#10;            Date endDate = sdf.parse(recurringExpense.endDate);&#10;            Date today = new Date();&#10;&#10;            if (today.after(startDate) &amp;&amp; today.before(endDate)) {&#10;                Calendar cal = Calendar.getInstance();&#10;                if (recurringExpense.frequency.equalsIgnoreCase(&quot;Monthly&quot;)) {&#10;                    // Check if an expense for this month has already been created&#10;                    return !expenseRepository.hasExpenseForMonth(recurringExpense.description, cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1);&#10;                } else if (recurringExpense.frequency.equalsIgnoreCase(&quot;Weekly&quot;)) {&#10;                    // Check if an expense for this week has already been created&#10;                    return !expenseRepository.hasExpenseForWeek(recurringExpense.description, cal.get(Calendar.YEAR), cal.get(Calendar.WEEK_OF_YEAR));&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private void createExpenseFromRecurring(RecurringExpense recurringExpense) {&#10;        Expense expense = new Expense();&#10;        expense.setDescription(recurringExpense.description);&#10;        expense.setAmount(recurringExpense.amount);&#10;        expense.setCategory(recurringExpense.category);&#10;        expense.setDate(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(new Date()));&#10;        // expense.setUserId(recurringExpense.userId);&#10;        expenseRepository.insert(expense);&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public IBinder onBind(Intent intent) {&#10;        return null;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.se07101campusexpenses.service;&#10;&#10;import android.app.Service;&#10;import android.content.Intent;&#10;import android.os.IBinder;&#10;import android.util.Log;&#10;&#10;import androidx.annotation.Nullable;&#10;import com.example.se07101campusexpenses.database.Expense;&#10;import com.example.se07101campusexpenses.database.ExpenseRepository;&#10;import com.example.se07101campusexpenses.database.RecurringExpenseRepository;&#10;import com.example.se07101campusexpenses.model.RecurringExpense;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Calendar;&#10;import java.util.Date;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;public class RecurringExpenseService extends Service {&#10;&#10;    private RecurringExpenseRepository recurringExpenseRepository;&#10;    private ExpenseRepository expenseRepository;&#10;&#10;    @Override&#10;    public void onCreate() {&#10;        super.onCreate();&#10;        recurringExpenseRepository = new RecurringExpenseRepository(getApplication());&#10;        expenseRepository = new ExpenseRepository(getApplication());&#10;    }&#10;&#10;    @Override&#10;    public int onStartCommand(Intent intent, int flags, int startId) {&#10;        new Thread(() -&gt; {&#10;            List&lt;RecurringExpense&gt; recurringExpenses = recurringExpenseRepository.getAllRecurringExpenses();&#10;            for (RecurringExpense recurringExpense : recurringExpenses) {&#10;                if (shouldCreateExpense(recurringExpense)) {&#10;                    createExpenseFromRecurring(recurringExpense);&#10;                }&#10;            }&#10;            stopSelf();&#10;        }).start();&#10;        return START_NOT_STICKY;&#10;    }&#10;&#10;    private boolean shouldCreateExpense(RecurringExpense recurringExpense) {&#10;        try {&#10;            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault());&#10;            Date startDate = sdf.parse(recurringExpense.startDate);&#10;            Date endDate = sdf.parse(recurringExpense.endDate);&#10;            Date today = new Date();&#10;&#10;            if (today.after(startDate) &amp;&amp; today.before(endDate)) {&#10;                Calendar cal = Calendar.getInstance();&#10;                if (recurringExpense.frequency.equalsIgnoreCase(&quot;Monthly&quot;)) {&#10;                    // Check if an expense for this month has already been created&#10;                    return !expenseRepository.hasExpenseForMonth(recurringExpense.description, cal.get(Calendar.YEAR), cal.get(Calendar.MONTH) + 1);&#10;                } else if (recurringExpense.frequency.equalsIgnoreCase(&quot;Weekly&quot;)) {&#10;                    // Check if an expense for this week has already been created&#10;                    return !expenseRepository.hasExpenseForWeek(recurringExpense.description, cal.get(Calendar.YEAR), cal.get(Calendar.WEEK_OF_YEAR));&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            Log.e(&quot;RecurringExpenseService&quot;, &quot;Error checking if expense should be created&quot;, e);&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private void createExpenseFromRecurring(RecurringExpense recurringExpense) {&#10;        com.example.se07101campusexpenses.database.Expense expense = new com.example.se07101campusexpenses.database.Expense();&#10;        expense.setDescription(recurringExpense.description);&#10;        expense.setAmount(recurringExpense.amount);&#10;        expense.setCategory(recurringExpense.category);&#10;        expense.setDate(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).format(new Date()));&#10;        // expense.setUserId(recurringExpense.userId);&#10;        expenseRepository.addExpense(expense);&#10;    }&#10;&#10;    @Nullable&#10;    @Override&#10;    public IBinder onBind(Intent intent) {&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_add_expense.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_add_expense.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:autofillHints=&quot;&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;10dp&quot;&#10;    tools:ignore=&quot;VisualLintButtonSize&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Add Expense&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:ignore=&quot;HardcodedText&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseName&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense name&quot;&#10;        android:inputType=&quot;text&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Select date&quot;&#10;        android:focusable=&quot;false&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:inputType=&quot;date&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spinnerExpenseCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Description&quot;&#10;        android:inputType=&quot;textMultiLine&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Save&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBackExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Back&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:autofillHints=&quot;&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;10dp&quot;&#10;    tools:ignore=&quot;VisualLintButtonSize&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Add Expense&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:ignore=&quot;HardcodedText&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense description&quot;&#10;        android:inputType=&quot;text&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Select date&quot;&#10;        android:focusable=&quot;false&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:inputType=&quot;date&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spinnerExpenseCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;CheckBox&#10;        android:id=&quot;@+id/chkRecurring&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:text=&quot;Recurring Expense&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutRecurringDates&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringStartDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select start date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringEndDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select end date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Save&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBackExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Back&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_add_recurring_expense.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_add_recurring_expense.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Description&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Category&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spFrequency&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:entries=&quot;@array/frequencies&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etStartDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Start Date (YYYY-MM-DD)&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etEndDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;End Date (YYYY-MM-DD)&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSave&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Save&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_edit_expense.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_edit_expense.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:autofillHints=&quot;&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;10dp&quot;&#10;    tools:ignore=&quot;VisualLintButtonSize&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Edit Expense&quot;&#10;        android:textColor=&quot;@android:color/black&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        tools:ignore=&quot;HardcodedText&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDescription&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense description&quot;&#10;        android:inputType=&quot;text&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseAmount&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Enter expense amount&quot;&#10;        android:inputType=&quot;numberDecimal&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/edtExpenseDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:autofillHints=&quot;&quot;&#10;        android:hint=&quot;Select date&quot;&#10;        android:focusable=&quot;false&quot;&#10;        android:clickable=&quot;true&quot;&#10;        android:inputType=&quot;date&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/spinnerExpenseCategory&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:minHeight=&quot;48dp&quot;&#10;        tools:ignore=&quot;VisualLintTextFieldSize&quot; /&gt;&#10;&#10;    &lt;CheckBox&#10;        android:id=&quot;@+id/chkRecurring&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:text=&quot;Recurring Expense&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/layoutRecurringDates&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:visibility=&quot;gone&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringStartDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select start date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/edtRecurringEndDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;15dp&quot;&#10;            android:clickable=&quot;true&quot;&#10;            android:focusable=&quot;false&quot;&#10;            android:hint=&quot;Select end date&quot;&#10;            android:inputType=&quot;date&quot;&#10;            android:minHeight=&quot;48dp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Save&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnDeleteExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FF0000&quot;&#10;        android:textColor=&quot;@android:color/white&quot;&#10;        android:text=&quot;Delete&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnBackExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;15dp&quot;&#10;        android:background=&quot;#FFA500&quot;&#10;        android:text=&quot;Back&quot;&#10;        tools:ignore=&quot;HardcodedText,VisualLintButtonSize&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_expense_report.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_expense_report.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etStartDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Start Date (YYYY-MM-DD)&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etEndDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;End Date (YYYY-MM-DD)&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnGenerateReport&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Generate Report&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvReportTotal&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvReport&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etStartDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Start Date (YYYY-MM-DD)&quot; /&gt;&#10;&#10;    &lt;EditText&#10;        android:id=&quot;@+id/etEndDate&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;End Date (YYYY-MM-DD)&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnGenerateReport&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;center_horizontal&quot;&#10;        android:text=&quot;Generate Report&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvReportTotal&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvReport&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:layout_marginTop=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;com.github.mikephil.charting.charts.PieChart&#10;        android:id=&quot;@+id/reportPieChart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_recurring_expense.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_recurring_expense.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.RecurringExpenseActivity&quot;&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/rvRecurringExpenses&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_above=&quot;@id/btnAddRecurringExpense&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnAddRecurringExpense&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#10;        android:text=&quot;Add Recurring Expense&quot; /&gt;&#10;&#10;&lt;/RelativeLayout&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/budget_item.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/budget_item.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvBudgetName&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvBudgetAmount&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvBudgetPeriod&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;12sp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/expense_item.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/expense_item.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseDescription&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseCategory&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseAmount&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;14sp&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvExpenseDate&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:textSize=&quot;12sp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_expenses.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_expenses.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.ExpensesFragment&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot;&gt;&#10;&#10;    &lt;!-- TODO: Update blank fragment layout --&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Expenses Page&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    tools:context=&quot;.ExpensesFragment&quot;&gt;&#13;&#10;&#13;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;        android:id=&quot;@+id/recyclerViewExpenses&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:padding=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;        android:id=&quot;@+id/fabAddExpense&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_alignParentEnd=&quot;true&quot;&#13;&#10;        android:layout_alignParentBottom=&quot;true&quot;&#13;&#10;        android:layout_margin=&quot;16dp&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_input_add&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/RelativeLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_home.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.HomeFragment&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvTotalSpending&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Total Spending: $0.00&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvRemainingBudget&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Remaining Budget: $0.00&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;&#10;    &lt;com.github.mikephil.charting.charts.LineChart&#10;        android:id=&quot;@+id/chart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.HomeFragment&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvTotalSpending&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Total Spending: $0.00&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;/&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvRemainingBudget&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Remaining Budget: $0.00&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;&#10;    &lt;com.github.mikephil.charting.charts.LineChart&#10;        android:id=&quot;@+id/chart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;    &lt;com.github.mikephil.charting.charts.PieChart&#10;        android:id=&quot;@+id/pieChart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;SE07101CampusExpenses&lt;/string&gt;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#10;    &lt;string name=&quot;open_drawer&quot;&gt;Open&lt;/string&gt;&#10;    &lt;string name=&quot;close_drawer&quot;&gt;Close&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources&gt;&#13;&#10;    &lt;string name=&quot;app_name&quot;&gt;SE07101CampusExpenses&lt;/string&gt;&#13;&#10;    &lt;!-- TODO: Remove or change this placeholder text --&gt;&#13;&#10;    &lt;string name=&quot;hello_blank_fragment&quot;&gt;Hello blank fragment&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;open_drawer&quot;&gt;Open&lt;/string&gt;&#13;&#10;    &lt;string name=&quot;close_drawer&quot;&gt;Close&lt;/string&gt;&#13;&#10;    &lt;string-array name=&quot;expense_categories&quot;&gt;&#13;&#10;        &lt;item&gt;Food&lt;/item&gt;&#13;&#10;        &lt;item&gt;Transportation&lt;/item&gt;&#13;&#10;        &lt;item&gt;Housing&lt;/item&gt;&#13;&#10;        &lt;item&gt;Utilities&lt;/item&gt;&#13;&#10;        &lt;item&gt;Entertainment&lt;/item&gt;&#13;&#10;        &lt;item&gt;Health&lt;/item&gt;&#13;&#10;        &lt;item&gt;Education&lt;/item&gt;&#13;&#10;        &lt;item&gt;Other&lt;/item&gt;&#13;&#10;    &lt;/string-array&gt;&#13;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;alias(libs.plugins.android.application) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#13;&#10;plugins {&#13;&#10;alias(libs.plugins.android.application) apply false&#13;&#10;}&#13;&#10;&#13;&#10;allprojects {&#13;&#10;    repositories {&#13;&#10;        google()&#13;&#10;        mavenCentral()&#13;&#10;        maven { url 'https://jitpack.io' }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>